{
  "address": "0xfdB3AC7EfDE48b036Fc30CF076e16e82C0c653F5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "OrderNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ACCEPTABLE_PRICE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ACCOUNT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLBACK_CONTRACT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLBACK_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DECREASE_POSITION_SWAP_TYPE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXECUTION_FEE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITIAL_COLLATERAL_DELTA_AMOUNT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INITIAL_COLLATERAL_TOKEN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_FROZEN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "IS_LONG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MARKET",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_OUTPUT_AMOUNT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ORDER_TYPE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECEIVER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SHOULD_UNWRAP_NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SIZE_DELTA_USD",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SWAP_PATH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRIGGER_PRICE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UI_FEE_RECEIVER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATED_AT_BLOCK",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract DataStore",
          "name": "dataStore",
          "type": "DataStore"
        },
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialCollateralToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "swapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Order.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "enum Order.OrderType",
                  "name": "orderType",
                  "type": "Order.OrderType"
                },
                {
                  "internalType": "enum Order.DecreasePositionSwapType",
                  "name": "decreasePositionSwapType",
                  "type": "Order.DecreasePositionSwapType"
                },
                {
                  "internalType": "uint256",
                  "name": "sizeDeltaUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialCollateralDeltaAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "triggerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "acceptablePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minOutputAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Order.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "isLong",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "isFrozen",
                  "type": "bool"
                }
              ],
              "internalType": "struct Order.Flags",
              "name": "flags",
              "type": "tuple"
            }
          ],
          "internalType": "struct Order.Props",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x48c9064f7dcb69e0196784c562127367d4bfe0015bc03392da9dc10d5b517322",
  "receipt": {
    "to": null,
    "from": "0xbF13755c11F362E59B3df8BCadA06CAf1C2cdB99",
    "contractAddress": "0xfdB3AC7EfDE48b036Fc30CF076e16e82C0c653F5",
    "transactionIndex": 0,
    "gasUsed": "3648969",
    "logsBloom": "0x
    "blockHash": "0x8f842549d425c5c8c985729bcc9a143c2664d6f30c05115cbd57719b5034e925",
    "transactionHash": "0x48c9064f7dcb69e0196784c562127367d4bfe0015bc03392da9dc10d5b517322",
    "logs": [],
    "blockNumber": 36399092,
    "cumulativeGasUsed": "3648969",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0156edc567de6ea182d3907607577999",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"OrderNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ACCEPTABLE_PRICE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ACCOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLBACK_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLBACK_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DECREASE_POSITION_SWAP_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTION_FEE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_COLLATERAL_DELTA_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_COLLATERAL_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_FROZEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"IS_LONG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MARKET\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_OUTPUT_AMOUNT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORDER_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHOULD_UNWRAP_NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIZE_DELTA_USD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_PATH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRIGGER_PRICE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UI_FEE_RECEIVER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATED_AT_BLOCK\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract DataStore\",\"name\":\"dataStore\",\"type\":\"DataStore\"},{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"get\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Order.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"Order.OrderType\"},{\"internalType\":\"enum Order.DecreasePositionSwapType\",\"name\":\"decreasePositionSwapType\",\"type\":\"Order.DecreasePositionSwapType\"},{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct Order.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"}],\"internalType\":\"struct Order.Flags\",\"name\":\"flags\",\"type\":\"tuple\"}],\"internalType\":\"struct Order.Props\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Library for order storage functions\",\"kind\":\"dev\",\"methods\":{},\"title\":\"OrderStoreUtils\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/order/OrderStoreUtils.sol\":\"OrderStoreUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/chain/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @title ArbSys\\r\\n// @dev Globally available variables for Arbitrum may have both an L1 and an L2\\r\\n// value, the ArbSys interface is used to retrieve the L2 value\\r\\ninterface ArbSys {\\r\\n    function arbBlockNumber() external view returns (uint256);\\r\\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0x5feb28365d9707234a65befec4fd125431d3fe1f8544365bf5310a3f8a1feb52\",\"license\":\"BUSL-1.1\"},\"contracts/chain/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ArbSys.sol\\\";\\r\\n\\r\\n// @title Chain\\r\\n// @dev Wrap the calls to retrieve chain variables to handle differences\\r\\n// between chain implementations\\r\\nlibrary Chain {\\r\\n    // if the ARBITRUM_CHAIN_ID changes, a new version of this library\\r\\n    // and contracts depending on it would need to be deployed\\r\\n    uint256 constant public ARBITRUM_CHAIN_ID = 42161;\\r\\n    uint256 constant public ARBITRUM_GOERLI_CHAIN_ID = 421613;\\r\\n\\r\\n    ArbSys constant public arbSys = ArbSys(address(100));\\r\\n\\r\\n    // @dev return the current block's timestamp\\r\\n    // @return the current block's timestamp\\r\\n    function currentTimestamp() internal view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    // @dev return the current block's number\\r\\n    // @return the current block's number\\r\\n    function currentBlockNumber() internal view returns (uint256) {\\r\\n        if (shouldUseArbSysValues()) {\\r\\n            return arbSys.arbBlockNumber();\\r\\n        }\\r\\n\\r\\n        return block.number;\\r\\n    }\\r\\n\\r\\n    // @dev return the current block's hash\\r\\n    // @return the current block's hash\\r\\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\r\\n        if (shouldUseArbSysValues()) {\\r\\n            return arbSys.arbBlockHash(blockNumber);\\r\\n        }\\r\\n\\r\\n        return blockhash(blockNumber);\\r\\n    }\\r\\n\\r\\n    function shouldUseArbSysValues() internal view returns (bool) {\\r\\n        return block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_GOERLI_CHAIN_ID;\\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a76c649406bbb804b8453af6ab942891e3e8335b50d5e6e5a01bbcab40ce509\",\"license\":\"BUSL-1.1\"},\"contracts/data/DataStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../role/RoleModule.sol\\\";\\r\\nimport \\\"../utils/Calc.sol\\\";\\r\\nimport \\\"../utils/Printer.sol\\\";\\r\\n\\r\\n// @title DataStore\\r\\n// @dev DataStore for all general state values\\r\\ncontract DataStore is RoleModule {\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\r\\n    using EnumerableValues for EnumerableSet.AddressSet;\\r\\n    using EnumerableValues for EnumerableSet.UintSet;\\r\\n\\r\\n    // store for uint values\\r\\n    mapping(bytes32 => uint256) public uintValues;\\r\\n    // store for int values\\r\\n    mapping(bytes32 => int256) public intValues;\\r\\n    // store for address values\\r\\n    mapping(bytes32 => address) public addressValues;\\r\\n    // store for bool values\\r\\n    mapping(bytes32 => bool) public boolValues;\\r\\n    // store for string values\\r\\n    mapping(bytes32 => string) public stringValues;\\r\\n    // store for bytes32 values\\r\\n    mapping(bytes32 => bytes32) public bytes32Values;\\r\\n\\r\\n    // store for uint[] values\\r\\n    mapping(bytes32 => uint256[]) public uintArrayValues;\\r\\n    // store for int[] values\\r\\n    mapping(bytes32 => int256[]) public intArrayValues;\\r\\n    // store for address[] values\\r\\n    mapping(bytes32 => address[]) public addressArrayValues;\\r\\n    // store for bool[] values\\r\\n    mapping(bytes32 => bool[]) public boolArrayValues;\\r\\n    // store for string[] values\\r\\n    mapping(bytes32 => string[]) public stringArrayValues;\\r\\n    // store for bytes32[] values\\r\\n    mapping(bytes32 => bytes32[]) public bytes32ArrayValues;\\r\\n\\r\\n    // store for bytes32 sets\\r\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) internal bytes32Sets;\\r\\n    // store for address sets\\r\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal addressSets;\\r\\n    // store for uint256 sets\\r\\n    mapping(bytes32 => EnumerableSet.UintSet) internal uintSets;\\r\\n\\r\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\r\\n\\r\\n    // @dev get the uint value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @return the uint value for the key\\r\\n    function getUint(bytes32 key) external view returns (uint256) {\\r\\n        return uintValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the uint value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @param value the value to set\\r\\n    // @return the uint value for the key\\r\\n    function setUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\r\\n        uintValues[key] = value;\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the uint value for the given key\\r\\n    // @param key the key of the value\\r\\n    function removeUint(bytes32 key) external onlyController {\\r\\n        delete uintValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev add the input int value to the existing uint value\\r\\n    // @param key the key of the value\\r\\n    // @param value the input int value\\r\\n    // @return the new uint value\\r\\n    function applyDeltaToUint(bytes32 key, int256 value, string memory errorMessage) external onlyController returns (uint256) {\\r\\n        uint256 currValue = uintValues[key];\\r\\n        if (value < 0 && (-value).toUint256() > currValue) {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n        uint256 nextUint = Calc.sumReturnUint256(currValue, value);\\r\\n        uintValues[key] = nextUint;\\r\\n        return nextUint;\\r\\n    }\\r\\n\\r\\n    // @dev add the input uint value to the existing uint value\\r\\n    // @param key the key of the value\\r\\n    // @param value the input int value\\r\\n    // @return the new uint value\\r\\n    function applyDeltaToUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\r\\n        uint256 currValue = uintValues[key];\\r\\n        uint256 nextUint = currValue + value;\\r\\n        uintValues[key] = nextUint;\\r\\n        return nextUint;\\r\\n    }\\r\\n\\r\\n    // @dev add the input int value to the existing uint value, prevent the uint\\r\\n    // value from becoming negative\\r\\n    // @param key the key of the value\\r\\n    // @param value the input int value\\r\\n    // @return the new uint value\\r\\n    function applyBoundedDeltaToUint(bytes32 key, int256 value) external onlyController returns (uint256) {\\r\\n        uint256 uintValue = uintValues[key];\\r\\n        if (value < 0 && (-value).toUint256() > uintValue) {\\r\\n            uintValues[key] = 0;\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 nextUint = Calc.sumReturnUint256(uintValue, value);\\r\\n        uintValues[key] = nextUint;\\r\\n        return nextUint;\\r\\n    }\\r\\n\\r\\n    // @dev add the input uint value to the existing uint value\\r\\n    // @param key the key of the value\\r\\n    // @param value the input uint value\\r\\n    // @return the new uint value\\r\\n    function incrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\r\\n        uint256 nextUint = uintValues[key] + value;\\r\\n        uintValues[key] = nextUint;\\r\\n        return nextUint;\\r\\n    }\\r\\n\\r\\n    // @dev subtract the input uint value from the existing uint value\\r\\n    // @param key the key of the value\\r\\n    // @param value the input uint value\\r\\n    // @return the new uint value\\r\\n    function decrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\r\\n        uint256 nextUint = uintValues[key] - value;\\r\\n        uintValues[key] = nextUint;\\r\\n        return nextUint;\\r\\n    }\\r\\n\\r\\n    // @dev get the int value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @return the int value for the key\\r\\n    function getInt(bytes32 key) external view returns (int256) {\\r\\n        return intValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the int value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @param value the value to set\\r\\n    // @return the int value for the key\\r\\n    function setInt(bytes32 key, int256 value) external onlyController returns (int256) {\\r\\n        intValues[key] = value;\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    function removeInt(bytes32 key) external onlyController {\\r\\n        delete intValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev add the input int value to the existing int value\\r\\n    // @param key the key of the value\\r\\n    // @param value the input int value\\r\\n    // @return the new int value\\r\\n    function applyDeltaToInt(bytes32 key, int256 value) external onlyController returns (int256) {\\r\\n        int256 nextInt = intValues[key] + value;\\r\\n        intValues[key] = nextInt;\\r\\n        return nextInt;\\r\\n    }\\r\\n\\r\\n    // @dev add the input int value to the existing int value\\r\\n    // @param key the key of the value\\r\\n    // @param value the input int value\\r\\n    // @return the new int value\\r\\n    function incrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\r\\n        int256 nextInt = intValues[key] + value;\\r\\n        intValues[key] = nextInt;\\r\\n        return nextInt;\\r\\n    }\\r\\n\\r\\n    // @dev subtract the input int value from the existing int value\\r\\n    // @param key the key of the value\\r\\n    // @param value the input int value\\r\\n    // @return the new int value\\r\\n    function decrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\r\\n        int256 nextInt = intValues[key] - value;\\r\\n        intValues[key] = nextInt;\\r\\n        return nextInt;\\r\\n    }\\r\\n\\r\\n    // @dev get the address value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @return the address value for the key\\r\\n    function getAddress(bytes32 key) external view returns (address) {\\r\\n        return addressValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the address value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @param value the value to set\\r\\n    // @return the address value for the key\\r\\n    function setAddress(bytes32 key, address value) external onlyController returns (address) {\\r\\n        addressValues[key] = value;\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the address value for the given key\\r\\n    // @param key the key of the value\\r\\n    function removeAddress(bytes32 key) external onlyController {\\r\\n        delete addressValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the bool value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @return the bool value for the key\\r\\n    function getBool(bytes32 key) external view returns (bool) {\\r\\n        return boolValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the bool value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @param value the value to set\\r\\n    // @return the bool value for the key\\r\\n    function setBool(bytes32 key, bool value) external onlyController returns (bool) {\\r\\n        boolValues[key] = value;\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the bool value for the given key\\r\\n    // @param key the key of the value\\r\\n    function removeBool(bytes32 key) external onlyController {\\r\\n        delete boolValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the string value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @return the string value for the key\\r\\n    function getString(bytes32 key) external view returns (string memory) {\\r\\n        return stringValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the string value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @param value the value to set\\r\\n    // @return the string value for the key\\r\\n    function setString(bytes32 key, string memory value) external onlyController returns (string memory) {\\r\\n        stringValues[key] = value;\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the string value for the given key\\r\\n    // @param key the key of the value\\r\\n    function removeString(bytes32 key) external onlyController {\\r\\n        delete stringValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the bytes32 value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @return the bytes32 value for the key\\r\\n    function getBytes32(bytes32 key) external view returns (bytes32) {\\r\\n        return bytes32Values[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the bytes32 value for the given key\\r\\n    // @param key the key of the value\\r\\n    // @param value the value to set\\r\\n    // @return the bytes32 value for the key\\r\\n    function setBytes32(bytes32 key, bytes32 value) external onlyController returns (bytes32) {\\r\\n        bytes32Values[key] = value;\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the bytes32 value for the given key\\r\\n    // @param key the key of the value\\r\\n    function removeBytes32(bytes32 key) external onlyController {\\r\\n        delete bytes32Values[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the uint array for the given key\\r\\n    // @param key the key of the uint array\\r\\n    // @return the uint array for the key\\r\\n    function getUintArray(bytes32 key) external view returns (uint256[] memory) {\\r\\n        return uintArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the uint array for the given key\\r\\n    // @param key the key of the uint array\\r\\n    // @param value the value of the uint array\\r\\n    function setUintArray(bytes32 key, uint256[] memory value) external onlyController {\\r\\n        uintArrayValues[key] = value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the uint array for the given key\\r\\n    // @param key the key of the uint array\\r\\n    // @param value the value of the uint array\\r\\n    function removeUintArray(bytes32 key) external onlyController {\\r\\n        delete uintArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the int array for the given key\\r\\n    // @param key the key of the int array\\r\\n    // @return the int array for the key\\r\\n    function getIntArray(bytes32 key) external view returns (int256[] memory) {\\r\\n        return intArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the int array for the given key\\r\\n    // @param key the key of the int array\\r\\n    // @param value the value of the int array\\r\\n    function setIntArray(bytes32 key, int256[] memory value) external onlyController {\\r\\n        intArrayValues[key] = value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the int array for the given key\\r\\n    // @param key the key of the int array\\r\\n    // @param value the value of the int array\\r\\n    function removeIntArray(bytes32 key) external onlyController {\\r\\n        delete intArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the address array for the given key\\r\\n    // @param key the key of the address array\\r\\n    // @return the address array for the key\\r\\n    function getAddressArray(bytes32 key) external view returns (address[] memory) {\\r\\n        return addressArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the address array for the given key\\r\\n    // @param key the key of the address array\\r\\n    // @param value the value of the address array\\r\\n    function setAddressArray(bytes32 key, address[] memory value) external onlyController {\\r\\n        addressArrayValues[key] = value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the address array for the given key\\r\\n    // @param key the key of the address array\\r\\n    // @param value the value of the address array\\r\\n    function removeAddressArray(bytes32 key) external onlyController {\\r\\n        delete addressArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the bool array for the given key\\r\\n    // @param key the key of the bool array\\r\\n    // @return the bool array for the key\\r\\n    function getBoolArray(bytes32 key) external view returns (bool[] memory) {\\r\\n        return boolArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the bool array for the given key\\r\\n    // @param key the key of the bool array\\r\\n    // @param value the value of the bool array\\r\\n    function setBoolArray(bytes32 key, bool[] memory value) external onlyController {\\r\\n        boolArrayValues[key] = value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the bool array for the given key\\r\\n    // @param key the key of the bool array\\r\\n    // @param value the value of the bool array\\r\\n    function removeBoolArray(bytes32 key) external onlyController {\\r\\n        delete boolArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the string array for the given key\\r\\n    // @param key the key of the string array\\r\\n    // @return the string array for the key\\r\\n    function getStringArray(bytes32 key) external view returns (string[] memory) {\\r\\n        return stringArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the string array for the given key\\r\\n    // @param key the key of the string array\\r\\n    // @param value the value of the string array\\r\\n    function setStringArray(bytes32 key, string[] memory value) external onlyController {\\r\\n        stringArrayValues[key] = value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the string array for the given key\\r\\n    // @param key the key of the string array\\r\\n    // @param value the value of the string array\\r\\n    function removeStringArray(bytes32 key) external onlyController {\\r\\n        delete stringArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev get the bytes32 array for the given key\\r\\n    // @param key the key of the bytes32 array\\r\\n    // @return the bytes32 array for the key\\r\\n    function getBytes32Array(bytes32 key) external view returns (bytes32[] memory) {\\r\\n        return bytes32ArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev set the bytes32 array for the given key\\r\\n    // @param key the key of the bytes32 array\\r\\n    // @param value the value of the bytes32 array\\r\\n    function setBytes32Array(bytes32 key, bytes32[] memory value) external onlyController {\\r\\n        bytes32ArrayValues[key] = value;\\r\\n    }\\r\\n\\r\\n    // @dev delete the bytes32 array for the given key\\r\\n    // @param key the key of the bytes32 array\\r\\n    // @param value the value of the bytes32 array\\r\\n    function removeBytes32Array(bytes32 key) external onlyController {\\r\\n        delete bytes32ArrayValues[key];\\r\\n    }\\r\\n\\r\\n    // @dev check whether the given value exists in the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to check\\r\\n    function containsBytes32(bytes32 setKey, bytes32 value) external view returns (bool) {\\r\\n        return bytes32Sets[setKey].contains(value);\\r\\n    }\\r\\n\\r\\n    // @dev get the length of the set\\r\\n    // @param setKey the key of the set\\r\\n    function getBytes32Count(bytes32 setKey) external view returns (uint256) {\\r\\n        return bytes32Sets[setKey].length();\\r\\n    }\\r\\n\\r\\n    // @dev get the values of the set in the given range\\r\\n    // @param setKey the key of the set\\r\\n    // @param the start of the range, values at the start index will be returned\\r\\n    // in the result\\r\\n    // @param the end of the range, values at the end index will not be returned\\r\\n    // in the result\\r\\n    function getBytes32ValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\r\\n        return bytes32Sets[setKey].valuesAt(start, end);\\r\\n    }\\r\\n\\r\\n    // @dev add the given value to the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to add\\r\\n    function addBytes32(bytes32 setKey, bytes32 value) external onlyController {\\r\\n        bytes32Sets[setKey].add(value);\\r\\n    }\\r\\n\\r\\n    // @dev remove the given value from the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to remove\\r\\n    function removeBytes32(bytes32 setKey, bytes32 value) external onlyController {\\r\\n        bytes32Sets[setKey].remove(value);\\r\\n    }\\r\\n\\r\\n    // @dev check whether the given value exists in the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to check\\r\\n    function containsAddress(bytes32 setKey, address value) external view returns (bool) {\\r\\n        return addressSets[setKey].contains(value);\\r\\n    }\\r\\n\\r\\n    // @dev get the length of the set\\r\\n    // @param setKey the key of the set\\r\\n    function getAddressCount(bytes32 setKey) external view returns (uint256) {\\r\\n        return addressSets[setKey].length();\\r\\n    }\\r\\n\\r\\n    // @dev get the values of the set in the given range\\r\\n    // @param setKey the key of the set\\r\\n    // @param the start of the range, values at the start index will be returned\\r\\n    // in the result\\r\\n    // @param the end of the range, values at the end index will not be returned\\r\\n    // in the result\\r\\n    function getAddressValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (address[] memory) {\\r\\n        return addressSets[setKey].valuesAt(start, end);\\r\\n    }\\r\\n\\r\\n    // @dev add the given value to the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to add\\r\\n    function addAddress(bytes32 setKey, address value) external onlyController {\\r\\n        addressSets[setKey].add(value);\\r\\n    }\\r\\n\\r\\n    // @dev remove the given value from the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to remove\\r\\n    function removeAddress(bytes32 setKey, address value) external onlyController {\\r\\n        addressSets[setKey].remove(value);\\r\\n    }\\r\\n\\r\\n    // @dev check whether the given value exists in the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to check\\r\\n    function containsUint(bytes32 setKey, uint256 value) external view returns (bool) {\\r\\n        return uintSets[setKey].contains(value);\\r\\n    }\\r\\n\\r\\n    // @dev get the length of the set\\r\\n    // @param setKey the key of the set\\r\\n    function getUintCount(bytes32 setKey) external view returns (uint256) {\\r\\n        return uintSets[setKey].length();\\r\\n    }\\r\\n\\r\\n    // @dev get the values of the set in the given range\\r\\n    // @param setKey the key of the set\\r\\n    // @param the start of the range, values at the start index will be returned\\r\\n    // in the result\\r\\n    // @param the end of the range, values at the end index will not be returned\\r\\n    // in the result\\r\\n    function getUintValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (uint256[] memory) {\\r\\n        return uintSets[setKey].valuesAt(start, end);\\r\\n    }\\r\\n\\r\\n    // @dev add the given value to the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to add\\r\\n    function addUint(bytes32 setKey, uint256 value) external onlyController {\\r\\n        uintSets[setKey].add(value);\\r\\n    }\\r\\n\\r\\n    // @dev remove the given value from the set\\r\\n    // @param setKey the key of the set\\r\\n    // @param value the value to remove\\r\\n    function removeUint(bytes32 setKey, uint256 value) external onlyController {\\r\\n        uintSets[setKey].remove(value);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfc3ec0a195a112aef1e79c86432f96e5dcdc1b9f1c50a6fcf8bf51fa3e4b4ea0\",\"license\":\"BUSL-1.1\"},\"contracts/data/Keys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// @title Keys\\r\\n// @dev Keys for values in the DataStore\\r\\nlibrary Keys {\\r\\n    // @dev key for the address of the wrapped native token\\r\\n    bytes32 public constant WNT = keccak256(abi.encode(\\\"WNT\\\"));\\r\\n    // @dev key for the nonce value used in NonceUtils\\r\\n    bytes32 public constant NONCE = keccak256(abi.encode(\\\"NONCE\\\"));\\r\\n\\r\\n    // @dev for sending received fees\\r\\n    bytes32 public constant FEE_RECEIVER = keccak256(abi.encode(\\\"FEE_RECEIVER\\\"));\\r\\n\\r\\n    // @dev for holding tokens that could not be sent out\\r\\n    bytes32 public constant HOLDING_ADDRESS = keccak256(abi.encode(\\\"HOLDING_ADDRESS\\\"));\\r\\n\\r\\n    // @dev key for in strict price feed mode\\r\\n    bytes32 public constant IN_STRICT_PRICE_FEED_MODE = keccak256(abi.encode(\\\"IN_STRICT_PRICE_FEED_MODE\\\"));\\r\\n\\r\\n    // @dev key for the minimum gas for execution error\\r\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS\\\"));\\r\\n\\r\\n    // @dev key for the minimum gas that should be forwarded for execution error handling\\r\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD\\\"));\\r\\n\\r\\n    // @dev key for the min additional gas for execution\\r\\n    bytes32 public constant MIN_ADDITIONAL_GAS_FOR_EXECUTION = keccak256(abi.encode(\\\"MIN_ADDITIONAL_GAS_FOR_EXECUTION\\\"));\\r\\n\\r\\n    // @dev for a global reentrancy guard\\r\\n    bytes32 public constant REENTRANCY_GUARD_STATUS = keccak256(abi.encode(\\\"REENTRANCY_GUARD_STATUS\\\"));\\r\\n\\r\\n    // @dev key for deposit fees\\r\\n    bytes32 public constant DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"DEPOSIT_FEE_TYPE\\\"));\\r\\n    // @dev key for withdrawal fees\\r\\n    bytes32 public constant WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"WITHDRAWAL_FEE_TYPE\\\"));\\r\\n    // @dev key for swap fees\\r\\n    bytes32 public constant SWAP_FEE_TYPE = keccak256(abi.encode(\\\"SWAP_FEE_TYPE\\\"));\\r\\n    // @dev key for position fees\\r\\n    bytes32 public constant POSITION_FEE_TYPE = keccak256(abi.encode(\\\"POSITION_FEE_TYPE\\\"));\\r\\n    // @dev key for ui deposit fees\\r\\n    bytes32 public constant UI_DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"UI_DEPOSIT_FEE_TYPE\\\"));\\r\\n    // @dev key for ui withdrawal fees\\r\\n    bytes32 public constant UI_WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"UI_WITHDRAWAL_FEE_TYPE\\\"));\\r\\n    // @dev key for ui swap fees\\r\\n    bytes32 public constant UI_SWAP_FEE_TYPE = keccak256(abi.encode(\\\"UI_SWAP_FEE_TYPE\\\"));\\r\\n    // @dev key for ui position fees\\r\\n    bytes32 public constant UI_POSITION_FEE_TYPE = keccak256(abi.encode(\\\"UI_POSITION_FEE_TYPE\\\"));\\r\\n\\r\\n    // @dev key for ui fee factor\\r\\n    bytes32 public constant UI_FEE_FACTOR = keccak256(abi.encode(\\\"UI_FEE_FACTOR\\\"));\\r\\n    // @dev key for max ui fee receiver factor\\r\\n    bytes32 public constant MAX_UI_FEE_FACTOR = keccak256(abi.encode(\\\"MAX_UI_FEE_FACTOR\\\"));\\r\\n\\r\\n    // @dev key for the claimable fee amount\\r\\n    bytes32 public constant CLAIMABLE_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FEE_AMOUNT\\\"));\\r\\n    // @dev key for the claimable ui fee amount\\r\\n    bytes32 public constant CLAIMABLE_UI_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_UI_FEE_AMOUNT\\\"));\\r\\n\\r\\n    // @dev key for the market list\\r\\n    bytes32 public constant MARKET_LIST = keccak256(abi.encode(\\\"MARKET_LIST\\\"));\\r\\n\\r\\n    // @dev key for the fee batch list\\r\\n    bytes32 public constant FEE_BATCH_LIST = keccak256(abi.encode(\\\"FEE_BATCH_LIST\\\"));\\r\\n\\r\\n    // @dev key for the deposit list\\r\\n    bytes32 public constant DEPOSIT_LIST = keccak256(abi.encode(\\\"DEPOSIT_LIST\\\"));\\r\\n    // @dev key for the account deposit list\\r\\n    bytes32 public constant ACCOUNT_DEPOSIT_LIST = keccak256(abi.encode(\\\"ACCOUNT_DEPOSIT_LIST\\\"));\\r\\n\\r\\n    // @dev key for the withdrawal list\\r\\n    bytes32 public constant WITHDRAWAL_LIST = keccak256(abi.encode(\\\"WITHDRAWAL_LIST\\\"));\\r\\n    // @dev key for the account withdrawal list\\r\\n    bytes32 public constant ACCOUNT_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"ACCOUNT_WITHDRAWAL_LIST\\\"));\\r\\n\\r\\n    // @dev key for the position list\\r\\n    bytes32 public constant POSITION_LIST = keccak256(abi.encode(\\\"POSITION_LIST\\\"));\\r\\n    // @dev key for the account position list\\r\\n    bytes32 public constant ACCOUNT_POSITION_LIST = keccak256(abi.encode(\\\"ACCOUNT_POSITION_LIST\\\"));\\r\\n\\r\\n    // @dev key for the order list\\r\\n    bytes32 public constant ORDER_LIST = keccak256(abi.encode(\\\"ORDER_LIST\\\"));\\r\\n    // @dev key for the account order list\\r\\n    bytes32 public constant ACCOUNT_ORDER_LIST = keccak256(abi.encode(\\\"ACCOUNT_ORDER_LIST\\\"));\\r\\n\\r\\n    // @dev key for the subaccount list\\r\\n    bytes32 public constant SUBACCOUNT_LIST = keccak256(abi.encode(\\\"SUBACCOUNT_LIST\\\"));\\r\\n\\r\\n    // @dev key for is market disabled\\r\\n    bytes32 public constant IS_MARKET_DISABLED = keccak256(abi.encode(\\\"IS_MARKET_DISABLED\\\"));\\r\\n\\r\\n    // @dev key for the max swap path length allowed\\r\\n    bytes32 public constant MAX_SWAP_PATH_LENGTH = keccak256(abi.encode(\\\"MAX_SWAP_PATH_LENGTH\\\"));\\r\\n    // @dev key used to store markets observed in a swap path, to ensure that a swap path contains unique markets\\r\\n    bytes32 public constant SWAP_PATH_MARKET_FLAG = keccak256(abi.encode(\\\"SWAP_PATH_MARKET_FLAG\\\"));\\r\\n    // @dev key used to store the min market tokens for the first deposit for a market\\r\\n    bytes32 public constant MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\\\"MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT\\\"));\\r\\n\\r\\n    // @dev key for whether the create deposit feature is disabled\\r\\n    bytes32 public constant CREATE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_DEPOSIT_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the cancel deposit feature is disabled\\r\\n    bytes32 public constant CANCEL_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_DEPOSIT_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the execute deposit feature is disabled\\r\\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_DEPOSIT_FEATURE_DISABLED\\\"));\\r\\n\\r\\n    // @dev key for whether the create withdrawal feature is disabled\\r\\n    bytes32 public constant CREATE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the cancel withdrawal feature is disabled\\r\\n    bytes32 public constant CANCEL_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_WITHDRAWAL_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the execute withdrawal feature is disabled\\r\\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\r\\n\\r\\n    // @dev key for whether the create order feature is disabled\\r\\n    bytes32 public constant CREATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_ORDER_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the execute order feature is disabled\\r\\n    bytes32 public constant EXECUTE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ORDER_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the execute adl feature is disabled\\r\\n    // for liquidations, it can be disabled by using the EXECUTE_ORDER_FEATURE_DISABLED key with the Liquidation\\r\\n    // order type, ADL orders have a MarketDecrease order type, so a separate key is needed to disable it\\r\\n    bytes32 public constant EXECUTE_ADL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ADL_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the update order feature is disabled\\r\\n    bytes32 public constant UPDATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"UPDATE_ORDER_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the cancel order feature is disabled\\r\\n    bytes32 public constant CANCEL_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_ORDER_FEATURE_DISABLED\\\"));\\r\\n\\r\\n    // @dev key for whether the claim funding fees feature is disabled\\r\\n    bytes32 public constant CLAIM_FUNDING_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_FUNDING_FEES_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the claim collateral feature is disabled\\r\\n    bytes32 public constant CLAIM_COLLATERAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_COLLATERAL_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the claim affiliate rewards feature is disabled\\r\\n    bytes32 public constant CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the claim ui fees feature is disabled\\r\\n    bytes32 public constant CLAIM_UI_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_UI_FEES_FEATURE_DISABLED\\\"));\\r\\n    // @dev key for whether the subaccount feature is disabled\\r\\n    bytes32 public constant SUBACCOUNT_FEATURE_DISABLED = keccak256(abi.encode(\\\"SUBACCOUNT_FEATURE_DISABLED\\\"));\\r\\n\\r\\n    // @dev key for the minimum required oracle signers for an oracle observation\\r\\n    bytes32 public constant MIN_ORACLE_SIGNERS = keccak256(abi.encode(\\\"MIN_ORACLE_SIGNERS\\\"));\\r\\n    // @dev key for the minimum block confirmations before blockhash can be excluded for oracle signature validation\\r\\n    bytes32 public constant MIN_ORACLE_BLOCK_CONFIRMATIONS = keccak256(abi.encode(\\\"MIN_ORACLE_BLOCK_CONFIRMATIONS\\\"));\\r\\n    // @dev key for the maximum usable oracle price age in seconds\\r\\n    bytes32 public constant MAX_ORACLE_PRICE_AGE = keccak256(abi.encode(\\\"MAX_ORACLE_PRICE_AGE\\\"));\\r\\n    // @dev key for the maximum oracle price deviation factor from the ref price\\r\\n    bytes32 public constant MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR = keccak256(abi.encode(\\\"MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR\\\"));\\r\\n    // @dev key for the percentage amount of position fees to be received\\r\\n    bytes32 public constant POSITION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_RECEIVER_FACTOR\\\"));\\r\\n    // @dev key for the percentage amount of swap fees to be received\\r\\n    bytes32 public constant SWAP_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_RECEIVER_FACTOR\\\"));\\r\\n    // @dev key for the percentage amount of borrowing fees to be received\\r\\n    bytes32 public constant BORROWING_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"BORROWING_FEE_RECEIVER_FACTOR\\\"));\\r\\n\\r\\n    // @dev key for the base gas limit used when estimating execution fee\\r\\n    bytes32 public constant ESTIMATED_GAS_FEE_BASE_AMOUNT = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_BASE_AMOUNT\\\"));\\r\\n    // @dev key for the multiplier used when estimating execution fee\\r\\n    bytes32 public constant ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\r\\n\\r\\n    // @dev key for the base gas limit used when calculating execution fee\\r\\n    bytes32 public constant EXECUTION_GAS_FEE_BASE_AMOUNT = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_BASE_AMOUNT\\\"));\\r\\n    // @dev key for the multiplier used when calculating execution fee\\r\\n    bytes32 public constant EXECUTION_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\r\\n\\r\\n    // @dev key for the estimated gas limit for deposits\\r\\n    bytes32 public constant DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"DEPOSIT_GAS_LIMIT\\\"));\\r\\n    // @dev key for the estimated gas limit for withdrawals\\r\\n    bytes32 public constant WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\\\"WITHDRAWAL_GAS_LIMIT\\\"));\\r\\n    // @dev key for the estimated gas limit for single swaps\\r\\n    bytes32 public constant SINGLE_SWAP_GAS_LIMIT = keccak256(abi.encode(\\\"SINGLE_SWAP_GAS_LIMIT\\\"));\\r\\n    // @dev key for the estimated gas limit for increase orders\\r\\n    bytes32 public constant INCREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"INCREASE_ORDER_GAS_LIMIT\\\"));\\r\\n    // @dev key for the estimated gas limit for decrease orders\\r\\n    bytes32 public constant DECREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"DECREASE_ORDER_GAS_LIMIT\\\"));\\r\\n    // @dev key for the estimated gas limit for swap orders\\r\\n    bytes32 public constant SWAP_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"SWAP_ORDER_GAS_LIMIT\\\"));\\r\\n    // @dev key for the amount of gas to forward for token transfers\\r\\n    bytes32 public constant TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"TOKEN_TRANSFER_GAS_LIMIT\\\"));\\r\\n    // @dev key for the amount of gas to forward for native token transfers\\r\\n    bytes32 public constant NATIVE_TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"NATIVE_TOKEN_TRANSFER_GAS_LIMIT\\\"));\\r\\n    // @dev key for the maximum request block age, after which the request will be considered expired\\r\\n    bytes32 public constant REQUEST_EXPIRATION_BLOCK_AGE = keccak256(abi.encode(\\\"REQUEST_EXPIRATION_BLOCK_AGE\\\"));\\r\\n\\r\\n    bytes32 public constant MAX_CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"MAX_CALLBACK_GAS_LIMIT\\\"));\\r\\n    bytes32 public constant SAVED_CALLBACK_CONTRACT = keccak256(abi.encode(\\\"SAVED_CALLBACK_CONTRACT\\\"));\\r\\n\\r\\n    // @dev key for the min collateral factor\\r\\n    bytes32 public constant MIN_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR\\\"));\\r\\n    // @dev key for the min collateral factor for open interest multiplier\\r\\n    bytes32 public constant MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER\\\"));\\r\\n    // @dev key for the min allowed collateral in USD\\r\\n    bytes32 public constant MIN_COLLATERAL_USD = keccak256(abi.encode(\\\"MIN_COLLATERAL_USD\\\"));\\r\\n    // @dev key for the min allowed position size in USD\\r\\n    bytes32 public constant MIN_POSITION_SIZE_USD = keccak256(abi.encode(\\\"MIN_POSITION_SIZE_USD\\\"));\\r\\n\\r\\n    // @dev key for the virtual id of tokens\\r\\n    bytes32 public constant VIRTUAL_TOKEN_ID = keccak256(abi.encode(\\\"VIRTUAL_TOKEN_ID\\\"));\\r\\n    // @dev key for the virtual id of markets\\r\\n    bytes32 public constant VIRTUAL_MARKET_ID = keccak256(abi.encode(\\\"VIRTUAL_MARKET_ID\\\"));\\r\\n    // @dev key for the virtual inventory for swaps\\r\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_SWAPS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_SWAPS\\\"));\\r\\n    // @dev key for the virtual inventory for positions\\r\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_POSITIONS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_POSITIONS\\\"));\\r\\n\\r\\n    // @dev key for the position impact factor\\r\\n    bytes32 public constant POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_FACTOR\\\"));\\r\\n    // @dev key for the position impact exponent factor\\r\\n    bytes32 public constant POSITION_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_EXPONENT_FACTOR\\\"));\\r\\n    // @dev key for the max decrease position impact factor\\r\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR\\\"));\\r\\n    // @dev key for the max position impact factor for liquidations\\r\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS\\\"));\\r\\n    // @dev key for the position fee factor\\r\\n    bytes32 public constant POSITION_FEE_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_FACTOR\\\"));\\r\\n    // @dev key for the swap impact factor\\r\\n    bytes32 public constant SWAP_IMPACT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_FACTOR\\\"));\\r\\n    // @dev key for the swap impact exponent factor\\r\\n    bytes32 public constant SWAP_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_EXPONENT_FACTOR\\\"));\\r\\n    // @dev key for the swap fee factor\\r\\n    bytes32 public constant SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_FACTOR\\\"));\\r\\n    // @dev key for the oracle type\\r\\n    bytes32 public constant ORACLE_TYPE = keccak256(abi.encode(\\\"ORACLE_TYPE\\\"));\\r\\n    // @dev key for open interest\\r\\n    bytes32 public constant OPEN_INTEREST = keccak256(abi.encode(\\\"OPEN_INTEREST\\\"));\\r\\n    // @dev key for open interest in tokens\\r\\n    bytes32 public constant OPEN_INTEREST_IN_TOKENS = keccak256(abi.encode(\\\"OPEN_INTEREST_IN_TOKENS\\\"));\\r\\n    // @dev key for collateral sum for a market\\r\\n    bytes32 public constant COLLATERAL_SUM = keccak256(abi.encode(\\\"COLLATERAL_SUM\\\"));\\r\\n    // @dev key for pool amount\\r\\n    bytes32 public constant POOL_AMOUNT = keccak256(abi.encode(\\\"POOL_AMOUNT\\\"));\\r\\n    // @dev key for max pool amount\\r\\n    bytes32 public constant MAX_POOL_AMOUNT = keccak256(abi.encode(\\\"MAX_POOL_AMOUNT\\\"));\\r\\n    // @dev key for max pool amount for deposit\\r\\n    bytes32 public constant MAX_POOL_AMOUNT_FOR_DEPOSIT = keccak256(abi.encode(\\\"MAX_POOL_AMOUNT_FOR_DEPOSIT\\\"));\\r\\n    // @dev key for max open interest\\r\\n    bytes32 public constant MAX_OPEN_INTEREST = keccak256(abi.encode(\\\"MAX_OPEN_INTEREST\\\"));\\r\\n    // @dev key for position impact pool amount\\r\\n    bytes32 public constant POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_AMOUNT\\\"));\\r\\n    // @dev key for min position impact pool amount\\r\\n    bytes32 public constant MIN_POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"MIN_POSITION_IMPACT_POOL_AMOUNT\\\"));\\r\\n    // @dev key for position impact pool distribution rate\\r\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTION_RATE = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTION_RATE\\\"));\\r\\n    // @dev key for position impact pool distributed at\\r\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTED_AT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTED_AT\\\"));\\r\\n    // @dev key for swap impact pool amount\\r\\n    bytes32 public constant SWAP_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"SWAP_IMPACT_POOL_AMOUNT\\\"));\\r\\n    // @dev key for price feed\\r\\n    bytes32 public constant PRICE_FEED = keccak256(abi.encode(\\\"PRICE_FEED\\\"));\\r\\n    // @dev key for price feed multiplier\\r\\n    bytes32 public constant PRICE_FEED_MULTIPLIER = keccak256(abi.encode(\\\"PRICE_FEED_MULTIPLIER\\\"));\\r\\n    // @dev key for price feed heartbeat\\r\\n    bytes32 public constant PRICE_FEED_HEARTBEAT_DURATION = keccak256(abi.encode(\\\"PRICE_FEED_HEARTBEAT_DURATION\\\"));\\r\\n    // @dev key for realtime feed id\\r\\n    bytes32 public constant REALTIME_FEED_ID = keccak256(abi.encode(\\\"REALTIME_FEED_ID\\\"));\\r\\n    // @dev key for realtime feed multipler\\r\\n    bytes32 public constant REALTIME_FEED_MULTIPLIER = keccak256(abi.encode(\\\"REALTIME_FEED_MULTIPLIER\\\"));\\r\\n    // @dev key for stable price\\r\\n    bytes32 public constant STABLE_PRICE = keccak256(abi.encode(\\\"STABLE_PRICE\\\"));\\r\\n    // @dev key for reserve factor\\r\\n    bytes32 public constant RESERVE_FACTOR = keccak256(abi.encode(\\\"RESERVE_FACTOR\\\"));\\r\\n    // @dev key for open interest reserve factor\\r\\n    bytes32 public constant OPEN_INTEREST_RESERVE_FACTOR = keccak256(abi.encode(\\\"OPEN_INTEREST_RESERVE_FACTOR\\\"));\\r\\n    // @dev key for max pnl factor\\r\\n    bytes32 public constant MAX_PNL_FACTOR = keccak256(abi.encode(\\\"MAX_PNL_FACTOR\\\"));\\r\\n    // @dev key for max pnl factor\\r\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_TRADERS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_TRADERS\\\"));\\r\\n    // @dev key for max pnl factor for adl\\r\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_ADL = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_ADL\\\"));\\r\\n    // @dev key for min pnl factor for adl\\r\\n    bytes32 public constant MIN_PNL_FACTOR_AFTER_ADL = keccak256(abi.encode(\\\"MIN_PNL_FACTOR_AFTER_ADL\\\"));\\r\\n    // @dev key for max pnl factor\\r\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_DEPOSITS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_DEPOSITS\\\"));\\r\\n    // @dev key for max pnl factor for withdrawals\\r\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_WITHDRAWALS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_WITHDRAWALS\\\"));\\r\\n    // @dev key for latest ADL block\\r\\n    bytes32 public constant LATEST_ADL_BLOCK = keccak256(abi.encode(\\\"LATEST_ADL_BLOCK\\\"));\\r\\n    // @dev key for whether ADL is enabled\\r\\n    bytes32 public constant IS_ADL_ENABLED = keccak256(abi.encode(\\\"IS_ADL_ENABLED\\\"));\\r\\n    // @dev key for funding factor\\r\\n    bytes32 public constant FUNDING_FACTOR = keccak256(abi.encode(\\\"FUNDING_FACTOR\\\"));\\r\\n    // @dev key for funding exponent factor\\r\\n    bytes32 public constant FUNDING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"FUNDING_EXPONENT_FACTOR\\\"));\\r\\n    // @dev key for saved funding factor\\r\\n    bytes32 public constant SAVED_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"SAVED_FUNDING_FACTOR_PER_SECOND\\\"));\\r\\n    // @dev key for funding increase factor\\r\\n    bytes32 public constant FUNDING_INCREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_INCREASE_FACTOR_PER_SECOND\\\"));\\r\\n    // @dev key for funding decrease factor\\r\\n    bytes32 public constant FUNDING_DECREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_DECREASE_FACTOR_PER_SECOND\\\"));\\r\\n    // @dev key for min funding factor\\r\\n    bytes32 public constant MIN_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MIN_FUNDING_FACTOR_PER_SECOND\\\"));\\r\\n    // @dev key for max funding factor\\r\\n    bytes32 public constant MAX_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MAX_FUNDING_FACTOR_PER_SECOND\\\"));\\r\\n    // @dev key for threshold for stable funding\\r\\n    bytes32 public constant THRESHOLD_FOR_STABLE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_STABLE_FUNDING\\\"));\\r\\n    // @dev key for threshold for decrease funding\\r\\n    bytes32 public constant THRESHOLD_FOR_DECREASE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_DECREASE_FUNDING\\\"));\\r\\n    // @dev key for funding fee amount per size\\r\\n    bytes32 public constant FUNDING_FEE_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"FUNDING_FEE_AMOUNT_PER_SIZE\\\"));\\r\\n    // @dev key for claimable funding amount per size\\r\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT_PER_SIZE\\\"));\\r\\n    // @dev key for when funding was last updated at\\r\\n    bytes32 public constant FUNDING_UPDATED_AT = keccak256(abi.encode(\\\"FUNDING_UPDATED_AT\\\"));\\r\\n    // @dev key for claimable funding amount\\r\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT\\\"));\\r\\n    // @dev key for claimable collateral amount\\r\\n    bytes32 public constant CLAIMABLE_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_AMOUNT\\\"));\\r\\n    // @dev key for claimable collateral factor\\r\\n    bytes32 public constant CLAIMABLE_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_FACTOR\\\"));\\r\\n    // @dev key for claimable collateral time divisor\\r\\n    bytes32 public constant CLAIMABLE_COLLATERAL_TIME_DIVISOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_TIME_DIVISOR\\\"));\\r\\n    // @dev key for claimed collateral amount\\r\\n    bytes32 public constant CLAIMED_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMED_COLLATERAL_AMOUNT\\\"));\\r\\n    // @dev key for borrowing factor\\r\\n    bytes32 public constant BORROWING_FACTOR = keccak256(abi.encode(\\\"BORROWING_FACTOR\\\"));\\r\\n    // @dev key for borrowing factor\\r\\n    bytes32 public constant BORROWING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"BORROWING_EXPONENT_FACTOR\\\"));\\r\\n    // @dev key for skipping the borrowing factor for the smaller side\\r\\n    bytes32 public constant SKIP_BORROWING_FEE_FOR_SMALLER_SIDE = keccak256(abi.encode(\\\"SKIP_BORROWING_FEE_FOR_SMALLER_SIDE\\\"));\\r\\n    // @dev key for cumulative borrowing factor\\r\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR\\\"));\\r\\n    // @dev key for when the cumulative borrowing factor was last updated at\\r\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR_UPDATED_AT = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR_UPDATED_AT\\\"));\\r\\n    // @dev key for total borrowing amount\\r\\n    bytes32 public constant TOTAL_BORROWING = keccak256(abi.encode(\\\"TOTAL_BORROWING\\\"));\\r\\n    // @dev key for affiliate reward\\r\\n    bytes32 public constant AFFILIATE_REWARD = keccak256(abi.encode(\\\"AFFILIATE_REWARD\\\"));\\r\\n    // @dev key for max allowed subaccount action count\\r\\n    bytes32 public constant MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT\\\"));\\r\\n    // @dev key for subaccount action count\\r\\n    bytes32 public constant SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"SUBACCOUNT_ACTION_COUNT\\\"));\\r\\n    // @dev key for subaccount auto top up amount\\r\\n    bytes32 public constant SUBACCOUNT_AUTO_TOP_UP_AMOUNT = keccak256(abi.encode(\\\"SUBACCOUNT_AUTO_TOP_UP_AMOUNT\\\"));\\r\\n    // @dev key for subaccount order action\\r\\n    bytes32 public constant SUBACCOUNT_ORDER_ACTION = keccak256(abi.encode(\\\"SUBACCOUNT_ORDER_ACTION\\\"));\\r\\n    // @dev key for fee distributor swap order token index\\r\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX\\\"));\\r\\n    // @dev key for fee distributor swap fee batch\\r\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_FEE_BATCH = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_FEE_BATCH\\\"));\\r\\n\\r\\n    // @dev constant for user initiated cancel reason\\r\\n    string public constant USER_INITIATED_CANCEL = \\\"USER_INITIATED_CANCEL\\\";\\r\\n\\r\\n    // @dev key for the account deposit list\\r\\n    // @param account the account for the list\\r\\n    function accountDepositListKey(address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(ACCOUNT_DEPOSIT_LIST, account));\\r\\n    }\\r\\n\\r\\n    // @dev key for the account withdrawal list\\r\\n    // @param account the account for the list\\r\\n    function accountWithdrawalListKey(address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(ACCOUNT_WITHDRAWAL_LIST, account));\\r\\n    }\\r\\n\\r\\n    // @dev key for the account position list\\r\\n    // @param account the account for the list\\r\\n    function accountPositionListKey(address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(ACCOUNT_POSITION_LIST, account));\\r\\n    }\\r\\n\\r\\n    // @dev key for the account order list\\r\\n    // @param account the account for the list\\r\\n    function accountOrderListKey(address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(ACCOUNT_ORDER_LIST, account));\\r\\n    }\\r\\n\\r\\n    // @dev key for the subaccount list\\r\\n    // @param account the account for the list\\r\\n    function subaccountListKey(address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(SUBACCOUNT_LIST, account));\\r\\n    }\\r\\n\\r\\n    // @dev key for the claimable fee amount\\r\\n    // @param market the market for the fee\\r\\n    // @param token the token for the fee\\r\\n    function claimableFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(CLAIMABLE_FEE_AMOUNT, market, token));\\r\\n    }\\r\\n\\r\\n    // @dev key for the claimable ui fee amount\\r\\n    // @param market the market for the fee\\r\\n    // @param token the token for the fee\\r\\n    // @param account the account that can claim the ui fee\\r\\n    function claimableUiFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token));\\r\\n    }\\r\\n\\r\\n    // @dev key for the claimable ui fee amount for account\\r\\n    // @param market the market for the fee\\r\\n    // @param token the token for the fee\\r\\n    // @param account the account that can claim the ui fee\\r\\n    function claimableUiFeeAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token, account));\\r\\n    }\\r\\n\\r\\n    // @dev key for deposit gas limit\\r\\n    // @param singleToken whether a single token or pair tokens are being deposited\\r\\n    // @return key for deposit gas limit\\r\\n    function depositGasLimitKey(bool singleToken) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            DEPOSIT_GAS_LIMIT,\\r\\n            singleToken\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for withdrawal gas limit\\r\\n    // @return key for withdrawal gas limit\\r\\n    function withdrawalGasLimitKey() internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            WITHDRAWAL_GAS_LIMIT\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for single swap gas limit\\r\\n    // @return key for single swap gas limit\\r\\n    function singleSwapGasLimitKey() internal pure returns (bytes32) {\\r\\n        return SINGLE_SWAP_GAS_LIMIT;\\r\\n    }\\r\\n\\r\\n    // @dev key for increase order gas limit\\r\\n    // @return key for increase order gas limit\\r\\n    function increaseOrderGasLimitKey() internal pure returns (bytes32) {\\r\\n        return INCREASE_ORDER_GAS_LIMIT;\\r\\n    }\\r\\n\\r\\n    // @dev key for decrease order gas limit\\r\\n    // @return key for decrease order gas limit\\r\\n    function decreaseOrderGasLimitKey() internal pure returns (bytes32) {\\r\\n        return DECREASE_ORDER_GAS_LIMIT;\\r\\n    }\\r\\n\\r\\n    // @dev key for swap order gas limit\\r\\n    // @return key for swap order gas limit\\r\\n    function swapOrderGasLimitKey() internal pure returns (bytes32) {\\r\\n        return SWAP_ORDER_GAS_LIMIT;\\r\\n    }\\r\\n\\r\\n    function swapPathMarketFlagKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SWAP_PATH_MARKET_FLAG,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether create deposit is disabled\\r\\n    // @param the create deposit module\\r\\n    // @return key for whether create deposit is disabled\\r\\n    function createDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CREATE_DEPOSIT_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether cancel deposit is disabled\\r\\n    // @param the cancel deposit module\\r\\n    // @return key for whether cancel deposit is disabled\\r\\n    function cancelDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CANCEL_DEPOSIT_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether execute deposit is disabled\\r\\n    // @param the execute deposit module\\r\\n    // @return key for whether execute deposit is disabled\\r\\n    function executeDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            EXECUTE_DEPOSIT_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether create withdrawal is disabled\\r\\n    // @param the create withdrawal module\\r\\n    // @return key for whether create withdrawal is disabled\\r\\n    function createWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CREATE_WITHDRAWAL_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether cancel withdrawal is disabled\\r\\n    // @param the cancel withdrawal module\\r\\n    // @return key for whether cancel withdrawal is disabled\\r\\n    function cancelWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CANCEL_WITHDRAWAL_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether execute withdrawal is disabled\\r\\n    // @param the execute withdrawal module\\r\\n    // @return key for whether execute withdrawal is disabled\\r\\n    function executeWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            EXECUTE_WITHDRAWAL_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether create order is disabled\\r\\n    // @param the create order module\\r\\n    // @return key for whether create order is disabled\\r\\n    function createOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CREATE_ORDER_FEATURE_DISABLED,\\r\\n            module,\\r\\n            orderType\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether execute order is disabled\\r\\n    // @param the execute order module\\r\\n    // @return key for whether execute order is disabled\\r\\n    function executeOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            EXECUTE_ORDER_FEATURE_DISABLED,\\r\\n            module,\\r\\n            orderType\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether execute adl is disabled\\r\\n    // @param the execute adl module\\r\\n    // @return key for whether execute adl is disabled\\r\\n    function executeAdlFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            EXECUTE_ADL_FEATURE_DISABLED,\\r\\n            module,\\r\\n            orderType\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether update order is disabled\\r\\n    // @param the update order module\\r\\n    // @return key for whether update order is disabled\\r\\n    function updateOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            UPDATE_ORDER_FEATURE_DISABLED,\\r\\n            module,\\r\\n            orderType\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether cancel order is disabled\\r\\n    // @param the cancel order module\\r\\n    // @return key for whether cancel order is disabled\\r\\n    function cancelOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CANCEL_ORDER_FEATURE_DISABLED,\\r\\n            module,\\r\\n            orderType\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether claim funding fees is disabled\\r\\n    // @param the claim funding fees module\\r\\n    function claimFundingFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIM_FUNDING_FEES_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether claim colltareral is disabled\\r\\n    // @param the claim funding fees module\\r\\n    function claimCollateralFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIM_COLLATERAL_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether claim affiliate rewards is disabled\\r\\n    // @param the claim affiliate rewards module\\r\\n    function claimAffiliateRewardsFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether claim ui fees is disabled\\r\\n    // @param the claim ui fees module\\r\\n    function claimUiFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIM_UI_FEES_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether subaccounts are disabled\\r\\n    // @param the subaccount module\\r\\n    function subaccountFeatureDisabledKey(address module) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SUBACCOUNT_FEATURE_DISABLED,\\r\\n            module\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for ui fee factor\\r\\n    // @param account the fee receiver account\\r\\n    // @return key for ui fee factor\\r\\n    function uiFeeFactorKey(address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            UI_FEE_FACTOR,\\r\\n            account\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for gas to forward for token transfer\\r\\n    // @param the token to check\\r\\n    // @return key for gas to forward for token transfer\\r\\n    function tokenTransferGasLimit(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            TOKEN_TRANSFER_GAS_LIMIT,\\r\\n            token\\r\\n        ));\\r\\n   }\\r\\n\\r\\n   // @dev the default callback contract\\r\\n   // @param account the user's account\\r\\n   // @param market the address of the market\\r\\n   // @param callbackContract the callback contract\\r\\n   function savedCallbackContract(address account, address market) internal pure returns (bytes32) {\\r\\n       return keccak256(abi.encode(\\r\\n           SAVED_CALLBACK_CONTRACT,\\r\\n           account,\\r\\n           market\\r\\n       ));\\r\\n   }\\r\\n\\r\\n   // @dev the min collateral factor key\\r\\n   // @param the market for the min collateral factor\\r\\n   function minCollateralFactorKey(address market) internal pure returns (bytes32) {\\r\\n       return keccak256(abi.encode(\\r\\n           MIN_COLLATERAL_FACTOR,\\r\\n           market\\r\\n       ));\\r\\n   }\\r\\n\\r\\n   // @dev the min collateral factor for open interest multiplier key\\r\\n   // @param the market for the factor\\r\\n   function minCollateralFactorForOpenInterestMultiplierKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n       return keccak256(abi.encode(\\r\\n           MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER,\\r\\n           market,\\r\\n           isLong\\r\\n       ));\\r\\n   }\\r\\n\\r\\n   // @dev the key for the virtual token id\\r\\n   // @param the token to get the virtual id for\\r\\n   function virtualTokenIdKey(address token) internal pure returns (bytes32) {\\r\\n       return keccak256(abi.encode(\\r\\n           VIRTUAL_TOKEN_ID,\\r\\n           token\\r\\n       ));\\r\\n   }\\r\\n\\r\\n   // @dev the key for the virtual market id\\r\\n   // @param the market to get the virtual id for\\r\\n   function virtualMarketIdKey(address market) internal pure returns (bytes32) {\\r\\n       return keccak256(abi.encode(\\r\\n           VIRTUAL_MARKET_ID,\\r\\n           market\\r\\n       ));\\r\\n   }\\r\\n\\r\\n   // @dev the key for the virtual inventory for positions\\r\\n   // @param the virtualTokenId the virtual token id\\r\\n   function virtualInventoryForPositionsKey(bytes32 virtualTokenId) internal pure returns (bytes32) {\\r\\n       return keccak256(abi.encode(\\r\\n           VIRTUAL_INVENTORY_FOR_POSITIONS,\\r\\n           virtualTokenId\\r\\n       ));\\r\\n   }\\r\\n\\r\\n   // @dev the key for the virtual inventory for swaps\\r\\n   // @param the virtualMarketId the virtual market id\\r\\n   // @param the token to check the inventory for\\r\\n   function virtualInventoryForSwapsKey(bytes32 virtualMarketId, bool isLongToken) internal pure returns (bytes32) {\\r\\n       return keccak256(abi.encode(\\r\\n           VIRTUAL_INVENTORY_FOR_SWAPS,\\r\\n           virtualMarketId,\\r\\n           isLongToken\\r\\n       ));\\r\\n   }\\r\\n\\r\\n    // @dev key for position impact factor\\r\\n    // @param market the market address to check\\r\\n    // @param isPositive whether the impact is positive or negative\\r\\n    // @return key for position impact factor\\r\\n    function positionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            POSITION_IMPACT_FACTOR,\\r\\n            market,\\r\\n            isPositive\\r\\n        ));\\r\\n   }\\r\\n\\r\\n    // @dev key for position impact exponent factor\\r\\n    // @param market the market address to check\\r\\n    // @return key for position impact exponent factor\\r\\n    function positionImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            POSITION_IMPACT_EXPONENT_FACTOR,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for the max position impact factor\\r\\n    // @param market the market address to check\\r\\n    // @return key for the max position impact factor\\r\\n    function maxPositionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_POSITION_IMPACT_FACTOR,\\r\\n            market,\\r\\n            isPositive\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for the max position impact factor for liquidations\\r\\n    // @param market the market address to check\\r\\n    // @return key for the max position impact factor\\r\\n    function maxPositionImpactFactorForLiquidationsKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for position fee factor\\r\\n    // @param market the market address to check\\r\\n    // @param forPositiveImpact whether the fee is for an action that has a positive price impact\\r\\n    // @return key for position fee factor\\r\\n    function positionFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            POSITION_FEE_FACTOR,\\r\\n            market,\\r\\n            forPositiveImpact\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for swap impact factor\\r\\n    // @param market the market address to check\\r\\n    // @param isPositive whether the impact is positive or negative\\r\\n    // @return key for swap impact factor\\r\\n    function swapImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SWAP_IMPACT_FACTOR,\\r\\n            market,\\r\\n            isPositive\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for swap impact exponent factor\\r\\n    // @param market the market address to check\\r\\n    // @return key for swap impact exponent factor\\r\\n    function swapImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SWAP_IMPACT_EXPONENT_FACTOR,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n\\r\\n    // @dev key for swap fee factor\\r\\n    // @param market the market address to check\\r\\n    // @return key for swap fee factor\\r\\n    function swapFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SWAP_FEE_FACTOR,\\r\\n            market,\\r\\n            forPositiveImpact\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for oracle type\\r\\n    // @param token the token to check\\r\\n    // @return key for oracle type\\r\\n    function oracleTypeKey(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            ORACLE_TYPE,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for open interest\\r\\n    // @param market the market to check\\r\\n    // @param collateralToken the collateralToken to check\\r\\n    // @param isLong whether to check the long or short open interest\\r\\n    // @return key for open interest\\r\\n    function openInterestKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            OPEN_INTEREST,\\r\\n            market,\\r\\n            collateralToken,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for open interest in tokens\\r\\n    // @param market the market to check\\r\\n    // @param collateralToken the collateralToken to check\\r\\n    // @param isLong whether to check the long or short open interest\\r\\n    // @return key for open interest in tokens\\r\\n    function openInterestInTokensKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            OPEN_INTEREST_IN_TOKENS,\\r\\n            market,\\r\\n            collateralToken,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for collateral sum for a market\\r\\n    // @param market the market to check\\r\\n    // @param collateralToken the collateralToken to check\\r\\n    // @param isLong whether to check the long or short open interest\\r\\n    // @return key for collateral sum\\r\\n    function collateralSumKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            COLLATERAL_SUM,\\r\\n            market,\\r\\n            collateralToken,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for amount of tokens in a market's pool\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @return key for amount of tokens in a market's pool\\r\\n    function poolAmountKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            POOL_AMOUNT,\\r\\n            market,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for the max amount of pool tokens\\r\\n    // @param market the market for the pool\\r\\n    // @param token the token for the pool\\r\\n    function maxPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_POOL_AMOUNT,\\r\\n            market,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for the max amount of pool tokens for deposits\\r\\n    // @param market the market for the pool\\r\\n    // @param token the token for the pool\\r\\n    function maxPoolAmountForDepositKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_POOL_AMOUNT_FOR_DEPOSIT,\\r\\n            market,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for the max open interest\\r\\n    // @param market the market for the pool\\r\\n    // @param isLong whether the key is for the long or short side\\r\\n    function maxOpenInterestKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_OPEN_INTEREST,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for amount of tokens in a market's position impact pool\\r\\n    // @param market the market to check\\r\\n    // @return key for amount of tokens in a market's position impact pool\\r\\n    function positionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            POSITION_IMPACT_POOL_AMOUNT,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for min amount of tokens in a market's position impact pool\\r\\n    // @param market the market to check\\r\\n    // @return key for min amount of tokens in a market's position impact pool\\r\\n    function minPositionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MIN_POSITION_IMPACT_POOL_AMOUNT,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for position impact pool distribution rate\\r\\n    // @param market the market to check\\r\\n    // @return key for position impact pool distribution rate\\r\\n    function positionImpactPoolDistributionRateKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            POSITION_IMPACT_POOL_DISTRIBUTION_RATE,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for position impact pool distributed at\\r\\n    // @param market the market to check\\r\\n    // @return key for position impact pool distributed at\\r\\n    function positionImpactPoolDistributedAtKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            POSITION_IMPACT_POOL_DISTRIBUTED_AT,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for amount of tokens in a market's swap impact pool\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @return key for amount of tokens in a market's swap impact pool\\r\\n    function swapImpactPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SWAP_IMPACT_POOL_AMOUNT,\\r\\n            market,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for reserve factor\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for reserve factor\\r\\n    function reserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            RESERVE_FACTOR,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for open interest reserve factor\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for open interest reserve factor\\r\\n    function openInterestReserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            OPEN_INTEREST_RESERVE_FACTOR,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for max pnl factor\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for max pnl factor\\r\\n    function maxPnlFactorKey(bytes32 pnlFactorType, address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_PNL_FACTOR,\\r\\n            pnlFactorType,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for min PnL factor after ADL\\r\\n    // @param market the market for the pool\\r\\n    // @param isLong whether the key is for the long or short side\\r\\n    function minPnlFactorAfterAdlKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MIN_PNL_FACTOR_AFTER_ADL,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for latest adl block\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for latest adl block\\r\\n    function latestAdlBlockKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            LATEST_ADL_BLOCK,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for whether adl is enabled\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for whether adl is enabled\\r\\n    function isAdlEnabledKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            IS_ADL_ENABLED,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for funding factor\\r\\n    // @param market the market to check\\r\\n    // @return key for funding factor\\r\\n    function fundingFactorKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FUNDING_FACTOR,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for funding exponent\\r\\n    // @param market the market for the pool\\r\\n    function fundingExponentFactorKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FUNDING_EXPONENT_FACTOR,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for saved funding factor\\r\\n    // @param market the market for the pool\\r\\n    function savedFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SAVED_FUNDING_FACTOR_PER_SECOND,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for funding increase factor\\r\\n    // @param market the market for the pool\\r\\n    function fundingIncreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FUNDING_INCREASE_FACTOR_PER_SECOND,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for funding decrease factor\\r\\n    // @param market the market for the pool\\r\\n    function fundingDecreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FUNDING_DECREASE_FACTOR_PER_SECOND,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for min funding factor\\r\\n    // @param market the market for the pool\\r\\n    function minFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MIN_FUNDING_FACTOR_PER_SECOND,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for max funding factor\\r\\n    // @param market the market for the pool\\r\\n    function maxFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_FUNDING_FACTOR_PER_SECOND,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for threshold for stable funding\\r\\n    // @param market the market for the pool\\r\\n    function thresholdForStableFundingKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            THRESHOLD_FOR_STABLE_FUNDING,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for threshold for decreasing funding\\r\\n    // @param market the market for the pool\\r\\n    function thresholdForDecreaseFundingKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            THRESHOLD_FOR_DECREASE_FUNDING,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for funding fee amount per size\\r\\n    // @param market the market to check\\r\\n    // @param collateralToken the collateralToken to get the key for\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for funding fee amount per size\\r\\n    function fundingFeeAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FUNDING_FEE_AMOUNT_PER_SIZE,\\r\\n            market,\\r\\n            collateralToken,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimabel funding amount per size\\r\\n    // @param market the market to check\\r\\n    // @param collateralToken the collateralToken to get the key for\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for claimable funding amount per size\\r\\n    function claimableFundingAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMABLE_FUNDING_AMOUNT_PER_SIZE,\\r\\n            market,\\r\\n            collateralToken,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for when funding was last updated\\r\\n    // @param market the market to check\\r\\n    // @return key for when funding was last updated\\r\\n    function fundingUpdatedAtKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FUNDING_UPDATED_AT,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimable funding amount\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @return key for claimable funding amount\\r\\n    function claimableFundingAmountKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMABLE_FUNDING_AMOUNT,\\r\\n            market,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimable funding amount by account\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @param account the account to check\\r\\n    // @return key for claimable funding amount\\r\\n    function claimableFundingAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMABLE_FUNDING_AMOUNT,\\r\\n            market,\\r\\n            token,\\r\\n            account\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimable collateral amount\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @param account the account to check\\r\\n    // @param timeKey the time key for the claimable amount\\r\\n    // @return key for claimable funding amount\\r\\n    function claimableCollateralAmountKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\r\\n            market,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimable collateral amount for a timeKey for an account\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @param account the account to check\\r\\n    // @param timeKey the time key for the claimable amount\\r\\n    // @return key for claimable funding amount\\r\\n    function claimableCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\r\\n            market,\\r\\n            token,\\r\\n            timeKey,\\r\\n            account\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimable collateral factor for a timeKey\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @param timeKey the time key for the claimable amount\\r\\n    // @return key for claimable funding amount\\r\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMABLE_COLLATERAL_FACTOR,\\r\\n            market,\\r\\n            token,\\r\\n            timeKey\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimable collateral factor for a timeKey for an account\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @param timeKey the time key for the claimable amount\\r\\n    // @param account the account to check\\r\\n    // @return key for claimable funding amount\\r\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMABLE_COLLATERAL_FACTOR,\\r\\n            market,\\r\\n            token,\\r\\n            timeKey,\\r\\n            account\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for claimable collateral factor\\r\\n    // @param market the market to check\\r\\n    // @param token the token to check\\r\\n    // @param account the account to check\\r\\n    // @param timeKey the time key for the claimable amount\\r\\n    // @return key for claimable funding amount\\r\\n    function claimedCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CLAIMED_COLLATERAL_AMOUNT,\\r\\n            market,\\r\\n            token,\\r\\n            timeKey,\\r\\n            account\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for borrowing factor\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for borrowing factor\\r\\n    function borrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            BORROWING_FACTOR,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev the key for borrowing exponent\\r\\n    // @param market the market for the pool\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    function borrowingExponentFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            BORROWING_EXPONENT_FACTOR,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for cumulative borrowing factor\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for cumulative borrowing factor\\r\\n    function cumulativeBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CUMULATIVE_BORROWING_FACTOR,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for cumulative borrowing factor updated at\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for cumulative borrowing factor updated at\\r\\n    function cumulativeBorrowingFactorUpdatedAtKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            CUMULATIVE_BORROWING_FACTOR_UPDATED_AT,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for total borrowing amount\\r\\n    // @param market the market to check\\r\\n    // @param isLong whether to get the key for the long or short side\\r\\n    // @return key for total borrowing amount\\r\\n    function totalBorrowingKey(address market, bool isLong) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            TOTAL_BORROWING,\\r\\n            market,\\r\\n            isLong\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for affiliate reward amount\\r\\n    // @param market the market to check\\r\\n    // @param token the token to get the key for\\r\\n    // @param account the account to get the key for\\r\\n    // @return key for affiliate reward amount\\r\\n    function affiliateRewardKey(address market, address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            AFFILIATE_REWARD,\\r\\n            market,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function maxAllowedSubaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT,\\r\\n            account,\\r\\n            subaccount,\\r\\n            actionType\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function subaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SUBACCOUNT_ACTION_COUNT,\\r\\n            account,\\r\\n            subaccount,\\r\\n            actionType\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function subaccountAutoTopUpAmountKey(address account, address subaccount) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            SUBACCOUNT_AUTO_TOP_UP_AMOUNT,\\r\\n            account,\\r\\n            subaccount\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for affiliate reward amount for an account\\r\\n    // @param market the market to check\\r\\n    // @param token the token to get the key for\\r\\n    // @param account the account to get the key for\\r\\n    // @return key for affiliate reward amount\\r\\n    function affiliateRewardKey(address market, address token, address account) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            AFFILIATE_REWARD,\\r\\n            market,\\r\\n            token,\\r\\n            account\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for is market disabled\\r\\n    // @param market the market to check\\r\\n    // @return key for is market disabled\\r\\n    function isMarketDisabledKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            IS_MARKET_DISABLED,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for min market tokens for first deposit\\r\\n    // @param market the market to check\\r\\n    // @return key for min market tokens for first deposit\\r\\n    function minMarketTokensForFirstDepositKey(address market) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT,\\r\\n            market\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for price feed address\\r\\n    // @param token the token to get the key for\\r\\n    // @return key for price feed address\\r\\n    function priceFeedKey(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            PRICE_FEED,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for realtime feed ID\\r\\n    // @param token the token to get the key for\\r\\n    // @return key for realtime feed ID\\r\\n    function realtimeFeedIdKey(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            REALTIME_FEED_ID,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for realtime feed multiplier\\r\\n    // @param token the token to get the key for\\r\\n    // @return key for realtime feed multiplier\\r\\n    function realtimeFeedMultiplierKey(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            REALTIME_FEED_MULTIPLIER,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for price feed multiplier\\r\\n    // @param token the token to get the key for\\r\\n    // @return key for price feed multiplier\\r\\n    function priceFeedMultiplierKey(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            PRICE_FEED_MULTIPLIER,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    function priceFeedHeartbeatDurationKey(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            PRICE_FEED_HEARTBEAT_DURATION,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for stable price value\\r\\n    // @param token the token to get the key for\\r\\n    // @return key for stable price value\\r\\n    function stablePriceKey(address token) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            STABLE_PRICE,\\r\\n            token\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for fee distributor swap token index\\r\\n    // @param orderKey the swap order key\\r\\n    // @return key for fee distributor swap token index\\r\\n    function feeDistributorSwapTokenIndexKey(bytes32 orderKey) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX,\\r\\n            orderKey\\r\\n        ));\\r\\n    }\\r\\n\\r\\n    // @dev key for fee distributor swap fee batch key\\r\\n    // @param orderKey the swap order key\\r\\n    // @return key for fee distributor swap fee batch key\\r\\n    function feeDistributorSwapFeeBatchKey(bytes32 orderKey) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(\\r\\n            FEE_DISTRIBUTOR_SWAP_FEE_BATCH,\\r\\n            orderKey\\r\\n        ));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc98918444638bb57ab8d4e9937bf47ed95450e08f706272cf084c0a097fbd534\",\"license\":\"BUSL-1.1\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Errors {\\r\\n    // AdlHandler errors\\r\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\r\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\r\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\r\\n\\r\\n    // AdlUtils errors\\r\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\r\\n    error AdlNotEnabled();\\r\\n\\r\\n    // Bank errors\\r\\n    error SelfTransferNotSupported(address receiver);\\r\\n    error InvalidNativeTokenSender(address msgSender);\\r\\n\\r\\n    // BaseRouter\\r\\n    error CouldNotSendNativeToken(address receiver, uint256 amount);\\r\\n\\r\\n    // CallbackUtils errors\\r\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\r\\n\\r\\n    // Config errors\\r\\n    error InvalidBaseKey(bytes32 baseKey);\\r\\n    error InvalidFeeFactor(bytes32 baseKey, uint256 value);\\r\\n\\r\\n    // Timelock errors\\r\\n    error ActionAlreadySignalled();\\r\\n    error ActionNotSignalled();\\r\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\r\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\r\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\r\\n    error InvalidFeeReceiver(address receiver);\\r\\n    error InvalidOracleSigner(address receiver);\\r\\n\\r\\n    // DepositStoreUtils errors\\r\\n    error DepositNotFound(bytes32 key);\\r\\n\\r\\n    // DepositUtils errors\\r\\n    error EmptyDeposit();\\r\\n    error EmptyDepositAmounts();\\r\\n\\r\\n    // ExecuteDepositUtils errors\\r\\n    error MinMarketTokens(uint256 received, uint256 expected);\\r\\n    error EmptyDepositAmountsAfterSwap();\\r\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\r\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\r\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\r\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\r\\n\\r\\n    // ExchangeUtils errors\\r\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\r\\n\\r\\n    // ExternalHandler errors\\r\\n    error ExternalCallFailed(bytes data);\\r\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\r\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\r\\n    error InvalidExternalCallTarget(address target);\\r\\n\\r\\n    // FeeBatchStoreUtils errors\\r\\n    error FeeBatchNotFound(bytes32 key);\\r\\n\\r\\n    // FeeDistributor errors\\r\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\r\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\r\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\r\\n\\r\\n    // GlpMigrator errors\\r\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\r\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\r\\n\\r\\n    // OrderHandler errors\\r\\n    error OrderNotUpdatable(uint256 orderType);\\r\\n    error InvalidKeeperForFrozenOrder(address keeper);\\r\\n\\r\\n    // FeatureUtils errors\\r\\n    error DisabledFeature(bytes32 key);\\r\\n\\r\\n    // FeeHandler errors\\r\\n    error InvalidClaimFeesInput(uint256 marketsLength, uint256 tokensLength);\\r\\n\\r\\n    // GasUtils errors\\r\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\r\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\r\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\r\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\r\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\r\\n\\r\\n    // MarketFactory errors\\r\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\r\\n\\r\\n    // MarketStoreUtils errors\\r\\n    error MarketNotFound(address key);\\r\\n\\r\\n    // MarketUtils errors\\r\\n    error EmptyMarket();\\r\\n    error DisabledMarket(address market);\\r\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\r\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\r\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\r\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\r\\n    error UnableToGetOppositeToken(address inputToken, address market);\\r\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\r\\n    error EmptyMarketTokenSupply();\\r\\n    error InvalidSwapMarket(address market);\\r\\n    error UnableToGetCachedTokenPrice(address token, address market);\\r\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\r\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\r\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\r\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\r\\n    error MaxPoolAmountForDepositExceeded(uint256 poolAmount, uint256 maxPoolAmountForDeposit);\\r\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\r\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\r\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\r\\n    error InvalidPositionMarket(address market);\\r\\n    error InvalidCollateralTokenForMarket(address market, address token);\\r\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\r\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\r\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\r\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\r\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\r\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\r\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\r\\n    error UnexpectedPoolValue(int256 poolValue);\\r\\n\\r\\n    // Oracle errors\\r\\n    error EmptySigner(uint256 signerIndex);\\r\\n    error InvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\r\\n    error InvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\r\\n    error HasRealtimeFeedId(address token, bytes32 feedId);\\r\\n    error InvalidRealtimeFeedLengths(uint256 tokensLength, uint256 dataLength);\\r\\n    error EmptyRealtimeFeedId(address token);\\r\\n    error InvalidRealtimeFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\r\\n    error InvalidRealtimeBidAsk(address token, int192 bid, int192 ask);\\r\\n    error InvalidRealtimeBlockHash(address token, bytes32 blockHash, bytes32 expectedBlockHash);\\r\\n    error InvalidRealtimePrices(address token, int192 bid, int192 ask);\\r\\n    error RealtimeMaxPriceAgeExceeded(address token, uint256 oracleTimestamp, uint256 currentTimestamp);\\r\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\r\\n    error MinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\r\\n    error MaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\r\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\r\\n    error MinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\r\\n    error MaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\r\\n    error EmptyPriceFeedMultiplier(address token);\\r\\n    error EmptyRealtimeFeedMultiplier(address token);\\r\\n    error InvalidFeedPrice(address token, int256 price);\\r\\n    error PriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\r\\n    error MaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\r\\n    error InvalidOraclePrice(address token);\\r\\n    error InvalidSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\r\\n    error InvalidMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\r\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\r\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\r\\n    error EmptyPriceFeed(address token);\\r\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\r\\n    error MaxRefPriceDeviationExceeded(\\r\\n        address token,\\r\\n        uint256 price,\\r\\n        uint256 refPrice,\\r\\n        uint256 maxRefPriceDeviationFactor\\r\\n    );\\r\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\r\\n\\r\\n    // OracleModule errors\\r\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\r\\n    error EndOfOracleSimulation();\\r\\n\\r\\n    // OracleUtils errors\\r\\n    error EmptyCompactedPrice(uint256 index);\\r\\n    error EmptyCompactedBlockNumber(uint256 index);\\r\\n    error EmptyCompactedTimestamp(uint256 index);\\r\\n    error UnsupportedOracleBlockNumberType(uint256 oracleBlockNumberType);\\r\\n    error InvalidSignature(address recoveredSigner, address expectedSigner);\\r\\n\\r\\n    error EmptyPrimaryPrice(address token);\\r\\n\\r\\n    error OracleBlockNumbersAreSmallerThanRequired(uint256[] oracleBlockNumbers, uint256 expectedBlockNumber);\\r\\n    error OracleBlockNumberNotWithinRange(\\r\\n        uint256[] minOracleBlockNumbers,\\r\\n        uint256[] maxOracleBlockNumbers,\\r\\n        uint256 blockNumber\\r\\n    );\\r\\n\\r\\n    // BaseOrderUtils errors\\r\\n    error EmptyOrder();\\r\\n    error UnsupportedOrderType();\\r\\n    error InvalidOrderPrices(\\r\\n        uint256 primaryPriceMin,\\r\\n        uint256 primaryPriceMax,\\r\\n        uint256 triggerPrice,\\r\\n        uint256 orderType\\r\\n    );\\r\\n    error EmptySizeDeltaInTokens();\\r\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\r\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\r\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\r\\n\\r\\n    // IncreaseOrderUtils errors\\r\\n    error UnexpectedPositionState();\\r\\n\\r\\n    // OrderUtils errors\\r\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\r\\n    error OrderAlreadyFrozen();\\r\\n\\r\\n    // OrderStoreUtils errors\\r\\n    error OrderNotFound(bytes32 key);\\r\\n\\r\\n    // SwapOrderUtils errors\\r\\n    error UnexpectedMarket();\\r\\n\\r\\n    // DecreasePositionCollateralUtils errors\\r\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\r\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\r\\n\\r\\n    // DecreasePositionUtils errors\\r\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\r\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\r\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\r\\n    error PositionShouldNotBeLiquidated(\\r\\n        string reason,\\r\\n        int256 remainingCollateralUsd,\\r\\n        int256 minCollateralUsd,\\r\\n        int256 minCollateralUsdForLeverage\\r\\n    );\\r\\n\\r\\n    // IncreasePositionUtils errors\\r\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\r\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\r\\n\\r\\n    // PositionStoreUtils errors\\r\\n    error PositionNotFound(bytes32 key);\\r\\n\\r\\n    // PositionUtils errors\\r\\n    error LiquidatablePosition(\\r\\n        string reason,\\r\\n        int256 remainingCollateralUsd,\\r\\n        int256 minCollateralUsd,\\r\\n        int256 minCollateralUsdForLeverage\\r\\n    );\\r\\n\\r\\n    error EmptyPosition();\\r\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\r\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\r\\n\\r\\n    // PositionPricingUtils errors\\r\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\r\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\r\\n\\r\\n    // SwapPricingUtils errors\\r\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\r\\n\\r\\n    // RoleModule errors\\r\\n    error Unauthorized(address msgSender, string role);\\r\\n\\r\\n    // RoleStore errors\\r\\n    error ThereMustBeAtLeastOneRoleAdmin();\\r\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\r\\n\\r\\n    // ExchangeRouter errors\\r\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\r\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\r\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\r\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\r\\n\\r\\n    // SwapUtils errors\\r\\n    error InvalidTokenIn(address tokenIn, address market);\\r\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\r\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\r\\n    error DuplicatedMarketInSwapPath(address market);\\r\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\r\\n\\r\\n    // SubaccountRouter errors\\r\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\r\\n\\r\\n    // SubaccountUtils errors\\r\\n    error SubaccountNotAuthorized(address account, address subaccount);\\r\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\r\\n\\r\\n    // TokenUtils errors\\r\\n    error EmptyTokenTranferGasLimit(address token);\\r\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\r\\n    error EmptyHoldingAddress();\\r\\n\\r\\n    // AccountUtils errors\\r\\n    error EmptyAccount();\\r\\n    error EmptyReceiver();\\r\\n\\r\\n    // Array errors\\r\\n    error CompactedArrayOutOfBounds(\\r\\n        uint256[] compactedValues,\\r\\n        uint256 index,\\r\\n        uint256 slotIndex,\\r\\n        string label\\r\\n    );\\r\\n\\r\\n    error ArrayOutOfBoundsUint256(\\r\\n        uint256[] values,\\r\\n        uint256 index,\\r\\n        string label\\r\\n    );\\r\\n\\r\\n    error ArrayOutOfBoundsBytes(\\r\\n        bytes[] values,\\r\\n        uint256 index,\\r\\n        string label\\r\\n    );\\r\\n\\r\\n    // WithdrawalStoreUtils errors\\r\\n    error WithdrawalNotFound(bytes32 key);\\r\\n\\r\\n    // WithdrawalUtils errors\\r\\n    error EmptyWithdrawal();\\r\\n    error EmptyWithdrawalAmount();\\r\\n    error MinLongTokens(uint256 received, uint256 expected);\\r\\n    error MinShortTokens(uint256 received, uint256 expected);\\r\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\r\\n    error InsufficientWntAmount(uint256 wntAmount, uint256 executionFee);\\r\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\r\\n\\r\\n    // Uint256Mask errors\\r\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\r\\n    error DuplicatedIndex(uint256 index, string label);\\r\\n}\\r\\n\",\"keccak256\":\"0xd5d50a1848c8fcce3913b98c52ada1cd82c36454e3a92935daee61e1c2a11795\",\"license\":\"BUSL-1.1\"},\"contracts/order/Order.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../chain/Chain.sol\\\";\\r\\n\\r\\n// @title Order\\r\\n// @dev Struct for orders\\r\\nlibrary Order {\\r\\n    using Order for Props;\\r\\n\\r\\n    enum OrderType {\\r\\n        // @dev MarketSwap: swap token A to token B at the current market price\\r\\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\\r\\n        MarketSwap,\\r\\n        // @dev LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\\r\\n        LimitSwap,\\r\\n        // @dev MarketIncrease: increase position at the current market price\\r\\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\\r\\n        MarketIncrease,\\r\\n        // @dev LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\r\\n        LimitIncrease,\\r\\n        // @dev MarketDecrease: decrease position at the current market price\\r\\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\\r\\n        MarketDecrease,\\r\\n        // @dev LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\r\\n        LimitDecrease,\\r\\n        // @dev StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\r\\n        StopLossDecrease,\\r\\n        // @dev Liquidation: allows liquidation of positions if the criteria for liquidation are met\\r\\n        Liquidation\\r\\n    }\\r\\n\\r\\n    // to help further differentiate orders\\r\\n    enum SecondaryOrderType {\\r\\n        None,\\r\\n        Adl\\r\\n    }\\r\\n\\r\\n    enum DecreasePositionSwapType {\\r\\n        NoSwap,\\r\\n        SwapPnlTokenToCollateralToken,\\r\\n        SwapCollateralTokenToPnlToken\\r\\n    }\\r\\n\\r\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\r\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\r\\n    // use sub-structs to avoid this issue\\r\\n    // @param addresses address values\\r\\n    // @param numbers number values\\r\\n    // @param flags boolean values\\r\\n    struct Props {\\r\\n        Addresses addresses;\\r\\n        Numbers numbers;\\r\\n        Flags flags;\\r\\n    }\\r\\n\\r\\n    // @param account the account of the order\\r\\n    // @param receiver the receiver for any token transfers\\r\\n    // this field is meant to allow the output of an order to be\\r\\n    // received by an address that is different from the creator of the\\r\\n    // order whether this is for swaps or whether the account is the owner\\r\\n    // of a position\\r\\n    // for funding fees and claimable collateral, the funds are still\\r\\n    // credited to the owner of the position indicated by order.account\\r\\n    // @param callbackContract the contract to call for callbacks\\r\\n    // @param uiFeeReceiver the ui fee receiver\\r\\n    // @param market the trading market\\r\\n    // @param initialCollateralToken for increase orders, initialCollateralToken\\r\\n    // is the token sent in by the user, the token will be swapped through the\\r\\n    // specified swapPath, before being deposited into the position as collateral\\r\\n    // for decrease orders, initialCollateralToken is the collateral token of the position\\r\\n    // withdrawn collateral from the decrease of the position will be swapped\\r\\n    // through the specified swapPath\\r\\n    // for swaps, initialCollateralToken is the initial token sent for the swap\\r\\n    // @param swapPath an array of market addresses to swap through\\r\\n    struct Addresses {\\r\\n        address account;\\r\\n        address receiver;\\r\\n        address callbackContract;\\r\\n        address uiFeeReceiver;\\r\\n        address market;\\r\\n        address initialCollateralToken;\\r\\n        address[] swapPath;\\r\\n    }\\r\\n\\r\\n    // @param sizeDeltaUsd the requested change in position size\\r\\n    // @param initialCollateralDeltaAmount for increase orders, initialCollateralDeltaAmount\\r\\n    // is the amount of the initialCollateralToken sent in by the user\\r\\n    // for decrease orders, initialCollateralDeltaAmount is the amount of the position's\\r\\n    // collateralToken to withdraw\\r\\n    // for swaps, initialCollateralDeltaAmount is the amount of initialCollateralToken sent\\r\\n    // in for the swap\\r\\n    // @param orderType the order type\\r\\n    // @param triggerPrice the trigger price for non-market orders\\r\\n    // @param acceptablePrice the acceptable execution price for increase / decrease orders\\r\\n    // @param executionFee the execution fee for keepers\\r\\n    // @param callbackGasLimit the gas limit for the callbackContract\\r\\n    // @param minOutputAmount the minimum output amount for decrease orders and swaps\\r\\n    // note that for decrease orders, multiple tokens could be received, for this reason, the\\r\\n    // minOutputAmount value is treated as a USD value for validation in decrease orders\\r\\n    // @param updatedAtBlock the block at which the order was last updated\\r\\n    struct Numbers {\\r\\n        OrderType orderType;\\r\\n        DecreasePositionSwapType decreasePositionSwapType;\\r\\n        uint256 sizeDeltaUsd;\\r\\n        uint256 initialCollateralDeltaAmount;\\r\\n        uint256 triggerPrice;\\r\\n        uint256 acceptablePrice;\\r\\n        uint256 executionFee;\\r\\n        uint256 callbackGasLimit;\\r\\n        uint256 minOutputAmount;\\r\\n        uint256 updatedAtBlock;\\r\\n    }\\r\\n\\r\\n    // @param isLong whether the order is for a long or short\\r\\n    // @param shouldUnwrapNativeToken whether to unwrap native tokens before\\r\\n    // transferring to the user\\r\\n    // @param isFrozen whether the order is frozen\\r\\n    struct Flags {\\r\\n        bool isLong;\\r\\n        bool shouldUnwrapNativeToken;\\r\\n        bool isFrozen;\\r\\n    }\\r\\n\\r\\n    // @dev the order account\\r\\n    // @param props Props\\r\\n    // @return the order account\\r\\n    function account(Props memory props) internal pure returns (address) {\\r\\n        return props.addresses.account;\\r\\n    }\\r\\n\\r\\n    // @dev set the order account\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setAccount(Props memory props, address value) internal pure {\\r\\n        props.addresses.account = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order receiver\\r\\n    // @param props Props\\r\\n    // @return the order receiver\\r\\n    function receiver(Props memory props) internal pure returns (address) {\\r\\n        return props.addresses.receiver;\\r\\n    }\\r\\n\\r\\n    // @dev set the order receiver\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setReceiver(Props memory props, address value) internal pure {\\r\\n        props.addresses.receiver = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order callbackContract\\r\\n    // @param props Props\\r\\n    // @return the order callbackContract\\r\\n    function callbackContract(Props memory props) internal pure returns (address) {\\r\\n        return props.addresses.callbackContract;\\r\\n    }\\r\\n\\r\\n    // @dev set the order callbackContract\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setCallbackContract(Props memory props, address value) internal pure {\\r\\n        props.addresses.callbackContract = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order market\\r\\n    // @param props Props\\r\\n    // @return the order market\\r\\n    function market(Props memory props) internal pure returns (address) {\\r\\n        return props.addresses.market;\\r\\n    }\\r\\n\\r\\n    // @dev set the order market\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setMarket(Props memory props, address value) internal pure {\\r\\n        props.addresses.market = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order initialCollateralToken\\r\\n    // @param props Props\\r\\n    // @return the order initialCollateralToken\\r\\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\\r\\n        return props.addresses.initialCollateralToken;\\r\\n    }\\r\\n\\r\\n    // @dev set the order initialCollateralToken\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setInitialCollateralToken(Props memory props, address value) internal pure {\\r\\n        props.addresses.initialCollateralToken = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order uiFeeReceiver\\r\\n    // @param props Props\\r\\n    // @return the order uiFeeReceiver\\r\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\r\\n        return props.addresses.uiFeeReceiver;\\r\\n    }\\r\\n\\r\\n    // @dev set the order uiFeeReceiver\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\r\\n        props.addresses.uiFeeReceiver = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order swapPath\\r\\n    // @param props Props\\r\\n    // @return the order swapPath\\r\\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\\r\\n        return props.addresses.swapPath;\\r\\n    }\\r\\n\\r\\n    // @dev set the order swapPath\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setSwapPath(Props memory props, address[] memory value) internal pure {\\r\\n        props.addresses.swapPath = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order type\\r\\n    // @param props Props\\r\\n    // @return the order type\\r\\n    function orderType(Props memory props) internal pure returns (OrderType) {\\r\\n        return props.numbers.orderType;\\r\\n    }\\r\\n\\r\\n    // @dev set the order type\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setOrderType(Props memory props, OrderType value) internal pure {\\r\\n        props.numbers.orderType = value;\\r\\n    }\\r\\n\\r\\n    function decreasePositionSwapType(Props memory props) internal pure returns (DecreasePositionSwapType) {\\r\\n        return props.numbers.decreasePositionSwapType;\\r\\n    }\\r\\n\\r\\n    function setDecreasePositionSwapType(Props memory props, DecreasePositionSwapType value) internal pure {\\r\\n        props.numbers.decreasePositionSwapType = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order sizeDeltaUsd\\r\\n    // @param props Props\\r\\n    // @return the order sizeDeltaUsd\\r\\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.sizeDeltaUsd;\\r\\n    }\\r\\n\\r\\n    // @dev set the order sizeDeltaUsd\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setSizeDeltaUsd(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.sizeDeltaUsd = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order initialCollateralDeltaAmount\\r\\n    // @param props Props\\r\\n    // @return the order initialCollateralDeltaAmount\\r\\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.initialCollateralDeltaAmount;\\r\\n    }\\r\\n\\r\\n    // @dev set the order initialCollateralDeltaAmount\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.initialCollateralDeltaAmount = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order triggerPrice\\r\\n    // @param props Props\\r\\n    // @return the order triggerPrice\\r\\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.triggerPrice;\\r\\n    }\\r\\n\\r\\n    // @dev set the order triggerPrice\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setTriggerPrice(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.triggerPrice = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order acceptablePrice\\r\\n    // @param props Props\\r\\n    // @return the order acceptablePrice\\r\\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.acceptablePrice;\\r\\n    }\\r\\n\\r\\n    // @dev set the order acceptablePrice\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setAcceptablePrice(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.acceptablePrice = value;\\r\\n    }\\r\\n\\r\\n    // @dev set the order executionFee\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.executionFee = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order executionFee\\r\\n    // @param props Props\\r\\n    // @return the order executionFee\\r\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.executionFee;\\r\\n    }\\r\\n\\r\\n    // @dev the order callbackGasLimit\\r\\n    // @param props Props\\r\\n    // @return the order callbackGasLimit\\r\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.callbackGasLimit;\\r\\n    }\\r\\n\\r\\n    // @dev set the order callbackGasLimit\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.callbackGasLimit = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order minOutputAmount\\r\\n    // @param props Props\\r\\n    // @return the order minOutputAmount\\r\\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.minOutputAmount;\\r\\n    }\\r\\n\\r\\n    // @dev set the order minOutputAmount\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setMinOutputAmount(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.minOutputAmount = value;\\r\\n    }\\r\\n\\r\\n    // @dev the order updatedAtBlock\\r\\n    // @param props Props\\r\\n    // @return the order updatedAtBlock\\r\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\r\\n        return props.numbers.updatedAtBlock;\\r\\n    }\\r\\n\\r\\n    // @dev set the order updatedAtBlock\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\\r\\n        props.numbers.updatedAtBlock = value;\\r\\n    }\\r\\n\\r\\n    // @dev whether the order is for a long or short\\r\\n    // @param props Props\\r\\n    // @return whether the order is for a long or short\\r\\n    function isLong(Props memory props) internal pure returns (bool) {\\r\\n        return props.flags.isLong;\\r\\n    }\\r\\n\\r\\n    // @dev set whether the order is for a long or short\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setIsLong(Props memory props, bool value) internal pure {\\r\\n        props.flags.isLong = value;\\r\\n    }\\r\\n\\r\\n    // @dev whether to unwrap the native token before transfers to the user\\r\\n    // @param props Props\\r\\n    // @return whether to unwrap the native token before transfers to the user\\r\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\r\\n        return props.flags.shouldUnwrapNativeToken;\\r\\n    }\\r\\n\\r\\n    // @dev set whether the native token should be unwrapped before being\\r\\n    // transferred to the receiver\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\r\\n        props.flags.shouldUnwrapNativeToken = value;\\r\\n    }\\r\\n\\r\\n    // @dev whether the order is frozen\\r\\n    // @param props Props\\r\\n    // @return whether the order is frozen\\r\\n    function isFrozen(Props memory props) internal pure returns (bool) {\\r\\n        return props.flags.isFrozen;\\r\\n    }\\r\\n\\r\\n    // @dev set whether the order is frozen\\r\\n    // transferred to the receiver\\r\\n    // @param props Props\\r\\n    // @param value the value to set to\\r\\n    function setIsFrozen(Props memory props, bool value) internal pure {\\r\\n        props.flags.isFrozen = value;\\r\\n    }\\r\\n\\r\\n    // @dev set the order.updatedAtBlock to the current block number\\r\\n    // @param props Props\\r\\n    function touch(Props memory props) internal view {\\r\\n        props.setUpdatedAtBlock(Chain.currentBlockNumber());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb304a0bb6d7b1decf78a2bc4c270fcd42b617fb57b5b7897d732c95ac3f702ad\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderStoreUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../data/Keys.sol\\\";\\r\\nimport \\\"../data/DataStore.sol\\\";\\r\\n\\r\\nimport \\\"./Order.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title OrderStoreUtils\\r\\n * @dev Library for order storage functions\\r\\n */\\r\\nlibrary OrderStoreUtils {\\r\\n    using Order for Order.Props;\\r\\n\\r\\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\\\"ACCOUNT\\\"));\\r\\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\\\"RECEIVER\\\"));\\r\\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\\\"CALLBACK_CONTRACT\\\"));\\r\\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\\\"UI_FEE_RECEIVER\\\"));\\r\\n    bytes32 public constant MARKET = keccak256(abi.encode(\\\"MARKET\\\"));\\r\\n    bytes32 public constant INITIAL_COLLATERAL_TOKEN = keccak256(abi.encode(\\\"INITIAL_COLLATERAL_TOKEN\\\"));\\r\\n    bytes32 public constant SWAP_PATH = keccak256(abi.encode(\\\"SWAP_PATH\\\"));\\r\\n\\r\\n    bytes32 public constant ORDER_TYPE = keccak256(abi.encode(\\\"ORDER_TYPE\\\"));\\r\\n    bytes32 public constant DECREASE_POSITION_SWAP_TYPE = keccak256(abi.encode(\\\"DECREASE_POSITION_SWAP_TYPE\\\"));\\r\\n    bytes32 public constant SIZE_DELTA_USD = keccak256(abi.encode(\\\"SIZE_DELTA_USD\\\"));\\r\\n    bytes32 public constant INITIAL_COLLATERAL_DELTA_AMOUNT = keccak256(abi.encode(\\\"INITIAL_COLLATERAL_DELTA_AMOUNT\\\"));\\r\\n    bytes32 public constant TRIGGER_PRICE = keccak256(abi.encode(\\\"TRIGGER_PRICE\\\"));\\r\\n    bytes32 public constant ACCEPTABLE_PRICE = keccak256(abi.encode(\\\"ACCEPTABLE_PRICE\\\"));\\r\\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\\\"EXECUTION_FEE\\\"));\\r\\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"CALLBACK_GAS_LIMIT\\\"));\\r\\n    bytes32 public constant MIN_OUTPUT_AMOUNT = keccak256(abi.encode(\\\"MIN_OUTPUT_AMOUNT\\\"));\\r\\n    bytes32 public constant UPDATED_AT_BLOCK = keccak256(abi.encode(\\\"UPDATED_AT_BLOCK\\\"));\\r\\n\\r\\n    bytes32 public constant IS_LONG = keccak256(abi.encode(\\\"IS_LONG\\\"));\\r\\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\\\"SHOULD_UNWRAP_NATIVE_TOKEN\\\"));\\r\\n    bytes32 public constant IS_FROZEN = keccak256(abi.encode(\\\"IS_FROZEN\\\"));\\r\\n\\r\\n    function get(DataStore dataStore, bytes32 key) external view returns (Order.Props memory) {\\r\\n        Order.Props memory order;\\r\\n        if (!dataStore.containsBytes32(Keys.ORDER_LIST, key)) {\\r\\n            return order;\\r\\n        }\\r\\n\\r\\n        order.setAccount(dataStore.getAddress(\\r\\n            keccak256(abi.encode(key, ACCOUNT))\\r\\n        ));\\r\\n\\r\\n        order.setReceiver(dataStore.getAddress(\\r\\n            keccak256(abi.encode(key, RECEIVER))\\r\\n        ));\\r\\n\\r\\n        order.setCallbackContract(dataStore.getAddress(\\r\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\r\\n        ));\\r\\n\\r\\n        order.setUiFeeReceiver(dataStore.getAddress(\\r\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\r\\n        ));\\r\\n\\r\\n        order.setMarket(dataStore.getAddress(\\r\\n            keccak256(abi.encode(key, MARKET))\\r\\n        ));\\r\\n\\r\\n        order.setInitialCollateralToken(dataStore.getAddress(\\r\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN))\\r\\n        ));\\r\\n\\r\\n        order.setSwapPath(dataStore.getAddressArray(\\r\\n            keccak256(abi.encode(key, SWAP_PATH))\\r\\n        ));\\r\\n\\r\\n        order.setOrderType(Order.OrderType(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, ORDER_TYPE))\\r\\n        )));\\r\\n\\r\\n        order.setDecreasePositionSwapType(Order.DecreasePositionSwapType(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE))\\r\\n        )));\\r\\n\\r\\n        order.setSizeDeltaUsd(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, SIZE_DELTA_USD))\\r\\n        ));\\r\\n\\r\\n        order.setInitialCollateralDeltaAmount(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT))\\r\\n        ));\\r\\n\\r\\n        order.setTriggerPrice(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, TRIGGER_PRICE))\\r\\n        ));\\r\\n\\r\\n        order.setAcceptablePrice(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE))\\r\\n        ));\\r\\n\\r\\n        order.setExecutionFee(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\r\\n        ));\\r\\n\\r\\n        order.setCallbackGasLimit(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\r\\n        ));\\r\\n\\r\\n        order.setMinOutputAmount(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT))\\r\\n        ));\\r\\n\\r\\n        order.setUpdatedAtBlock(dataStore.getUint(\\r\\n            keccak256(abi.encode(key, UPDATED_AT_BLOCK))\\r\\n        ));\\r\\n\\r\\n        order.setIsLong(dataStore.getBool(\\r\\n            keccak256(abi.encode(key, IS_LONG))\\r\\n        ));\\r\\n\\r\\n        order.setShouldUnwrapNativeToken(dataStore.getBool(\\r\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\r\\n        ));\\r\\n\\r\\n        order.setIsFrozen(dataStore.getBool(\\r\\n            keccak256(abi.encode(key, IS_FROZEN))\\r\\n        ));\\r\\n\\r\\n        return order;\\r\\n    }\\r\\n\\r\\n    function set(DataStore dataStore, bytes32 key, Order.Props memory order) external {\\r\\n        dataStore.addBytes32(\\r\\n            Keys.ORDER_LIST,\\r\\n            key\\r\\n        );\\r\\n\\r\\n        dataStore.addBytes32(\\r\\n            Keys.accountOrderListKey(order.account()),\\r\\n            key\\r\\n        );\\r\\n\\r\\n        dataStore.setAddress(\\r\\n            keccak256(abi.encode(key, ACCOUNT)),\\r\\n            order.account()\\r\\n        );\\r\\n\\r\\n        dataStore.setAddress(\\r\\n            keccak256(abi.encode(key, RECEIVER)),\\r\\n            order.receiver()\\r\\n        );\\r\\n\\r\\n        dataStore.setAddress(\\r\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\\r\\n            order.callbackContract()\\r\\n        );\\r\\n\\r\\n        dataStore.setAddress(\\r\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\\r\\n            order.uiFeeReceiver()\\r\\n        );\\r\\n\\r\\n        dataStore.setAddress(\\r\\n            keccak256(abi.encode(key, MARKET)),\\r\\n            order.market()\\r\\n        );\\r\\n\\r\\n        dataStore.setAddress(\\r\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN)),\\r\\n            order.initialCollateralToken()\\r\\n        );\\r\\n\\r\\n        dataStore.setAddressArray(\\r\\n            keccak256(abi.encode(key, SWAP_PATH)),\\r\\n            order.swapPath()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, ORDER_TYPE)),\\r\\n            uint256(order.orderType())\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE)),\\r\\n            uint256(order.decreasePositionSwapType())\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, SIZE_DELTA_USD)),\\r\\n            order.sizeDeltaUsd()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT)),\\r\\n            order.initialCollateralDeltaAmount()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, TRIGGER_PRICE)),\\r\\n            order.triggerPrice()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE)),\\r\\n            order.acceptablePrice()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, EXECUTION_FEE)),\\r\\n            order.executionFee()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\\r\\n            order.callbackGasLimit()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT)),\\r\\n            order.minOutputAmount()\\r\\n        );\\r\\n\\r\\n        dataStore.setUint(\\r\\n            keccak256(abi.encode(key, UPDATED_AT_BLOCK)),\\r\\n            order.updatedAtBlock()\\r\\n        );\\r\\n\\r\\n        dataStore.setBool(\\r\\n            keccak256(abi.encode(key, IS_LONG)),\\r\\n            order.isLong()\\r\\n        );\\r\\n\\r\\n        dataStore.setBool(\\r\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\\r\\n            order.shouldUnwrapNativeToken()\\r\\n        );\\r\\n\\r\\n        dataStore.setBool(\\r\\n            keccak256(abi.encode(key, IS_FROZEN)),\\r\\n            order.isFrozen()\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function remove(DataStore dataStore, bytes32 key, address account) external {\\r\\n        if (!dataStore.containsBytes32(Keys.ORDER_LIST, key)) {\\r\\n            revert Errors.OrderNotFound(key);\\r\\n        }\\r\\n\\r\\n        dataStore.removeBytes32(\\r\\n            Keys.ORDER_LIST,\\r\\n            key\\r\\n        );\\r\\n\\r\\n        dataStore.removeBytes32(\\r\\n            Keys.accountOrderListKey(account),\\r\\n            key\\r\\n        );\\r\\n\\r\\n        dataStore.removeAddress(\\r\\n            keccak256(abi.encode(key, ACCOUNT))\\r\\n        );\\r\\n\\r\\n        dataStore.removeAddress(\\r\\n            keccak256(abi.encode(key, RECEIVER))\\r\\n        );\\r\\n\\r\\n        dataStore.removeAddress(\\r\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\r\\n        );\\r\\n\\r\\n        dataStore.removeAddress(\\r\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\r\\n        );\\r\\n\\r\\n        dataStore.removeAddress(\\r\\n            keccak256(abi.encode(key, MARKET))\\r\\n        );\\r\\n\\r\\n        dataStore.removeAddress(\\r\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN))\\r\\n        );\\r\\n\\r\\n        dataStore.removeAddressArray(\\r\\n            keccak256(abi.encode(key, SWAP_PATH))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, ORDER_TYPE))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, SIZE_DELTA_USD))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, TRIGGER_PRICE))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT))\\r\\n        );\\r\\n\\r\\n        dataStore.removeUint(\\r\\n            keccak256(abi.encode(key, UPDATED_AT_BLOCK))\\r\\n        );\\r\\n\\r\\n        dataStore.removeBool(\\r\\n            keccak256(abi.encode(key, IS_LONG))\\r\\n        );\\r\\n\\r\\n        dataStore.removeBool(\\r\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\r\\n        );\\r\\n\\r\\n        dataStore.removeBool(\\r\\n            keccak256(abi.encode(key, IS_FROZEN))\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getOrderCount(DataStore dataStore) internal view returns (uint256) {\\r\\n        return dataStore.getBytes32Count(Keys.ORDER_LIST);\\r\\n    }\\r\\n\\r\\n    function getOrderKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\r\\n        return dataStore.getBytes32ValuesAt(Keys.ORDER_LIST, start, end);\\r\\n    }\\r\\n\\r\\n    function getAccountOrderCount(DataStore dataStore, address account) internal view returns (uint256) {\\r\\n        return dataStore.getBytes32Count(Keys.accountOrderListKey(account));\\r\\n    }\\r\\n\\r\\n    function getAccountOrderKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\r\\n        return dataStore.getBytes32ValuesAt(Keys.accountOrderListKey(account), start, end);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4683b7dd781ebcf2943520da1cba789de942853ef1f3289819771d01e8a759c3\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Role\\r\\n * @dev Library for role keys\\r\\n */\\r\\nlibrary Role {\\r\\n    /**\\r\\n     * @dev The ROLE_ADMIN role.\\r\\n     */\\r\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The TIMELOCK_ADMIN role.\\r\\n     */\\r\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The TIMELOCK_MULTISIG role.\\r\\n     */\\r\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The CONFIG_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The CONTROLLER role.\\r\\n     */\\r\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\r\\n     */\\r\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The ROUTER_PLUGIN role.\\r\\n     */\\r\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The MARKET_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The FEE_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The ORDER_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The FROZEN_ORDER_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The PRICING_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\r\\n    /**\\r\\n     * @dev The LIQUIDATION_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\r\\n    /**\\r\\n     * @dev The ADL_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\r\\n}\\r\\n\",\"keccak256\":\"0xfc69b10b86f036b45f8ec44f4f3e2120fefa272acd16bd676425a302dc13fd69\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./RoleStore.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RoleModule\\r\\n * @dev Contract for role validation functions\\r\\n */\\r\\ncontract RoleModule {\\r\\n    RoleStore public immutable roleStore;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor that initializes the role store for this contract.\\r\\n     *\\r\\n     * @param _roleStore The contract instance to use as the role store.\\r\\n     */\\r\\n    constructor(RoleStore _roleStore) {\\r\\n        roleStore = _roleStore;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows the contract's own address to call the function.\\r\\n     */\\r\\n    modifier onlySelf() {\\r\\n        if (msg.sender != address(this)) {\\r\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\r\\n     */\\r\\n    modifier onlyTimelockMultisig() {\\r\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\r\\n     */\\r\\n    modifier onlyTimelockAdmin() {\\r\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyConfigKeeper() {\\r\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\r\\n     */\\r\\n    modifier onlyController() {\\r\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\r\\n     */\\r\\n    modifier onlyGovTokenController() {\\r\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\r\\n     */\\r\\n    modifier onlyRouterPlugin() {\\r\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyMarketKeeper() {\\r\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyFeeKeeper() {\\r\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyFeeDistributionKeeper() {\\r\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyOrderKeeper() {\\r\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyPricingKeeper() {\\r\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyLiquidationKeeper() {\\r\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyAdlKeeper() {\\r\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validates that the caller has the specified role.\\r\\n     *\\r\\n     * If the caller does not have the specified role, the transaction is reverted.\\r\\n     *\\r\\n     * @param role The key of the role to validate.\\r\\n     * @param roleName The name of the role to validate.\\r\\n     */\\r\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\r\\n        if (!roleStore.hasRole(msg.sender, role)) {\\r\\n            revert Errors.Unauthorized(msg.sender, roleName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4a1c0c26b4bad1e549d5b0a84cdc8a36f40a844f1bdee6e789e6db1eda1435cb\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"../utils/EnumerableValues.sol\\\";\\r\\nimport \\\"./Role.sol\\\";\\r\\nimport \\\"../error/Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RoleStore\\r\\n * @dev Stores roles and their members.\\r\\n */\\r\\ncontract RoleStore {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n    using EnumerableValues for EnumerableSet.AddressSet;\\r\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    EnumerableSet.Bytes32Set internal roles;\\r\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\r\\n    // checking if an account has a role is a frequently used function\\r\\n    // roleCache helps to save gas by offering a more efficient lookup\\r\\n    // vs calling roleMembers[key].contains(account)\\r\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\r\\n\\r\\n    modifier onlyRoleAdmin() {\\r\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\r\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants the specified role to the given account.\\r\\n     *\\r\\n     * @param account The address of the account.\\r\\n     * @param roleKey The key of the role to grant.\\r\\n     */\\r\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\r\\n        _grantRole(account, roleKey);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes the specified role from the given account.\\r\\n     *\\r\\n     * @param account The address of the account.\\r\\n     * @param roleKey The key of the role to revoke.\\r\\n     */\\r\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\r\\n        _revokeRole(account, roleKey);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the given account has the specified role.\\r\\n     *\\r\\n     * @param account The address of the account.\\r\\n     * @param roleKey The key of the role.\\r\\n     * @return True if the account has the role, false otherwise.\\r\\n     */\\r\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\r\\n        return roleCache[account][roleKey];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of roles stored in the contract.\\r\\n     *\\r\\n     * @return The number of roles.\\r\\n     */\\r\\n    function getRoleCount() external view returns (uint256) {\\r\\n        return roles.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keys of the roles stored in the contract.\\r\\n     *\\r\\n     * @param start The starting index of the range of roles to return.\\r\\n     * @param end The ending index of the range of roles to return.\\r\\n     * @return The keys of the roles.\\r\\n     */\\r\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\r\\n        return roles.valuesAt(start, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of members of the specified role.\\r\\n     *\\r\\n     * @param roleKey The key of the role.\\r\\n     * @return The number of members of the role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\r\\n        return roleMembers[roleKey].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the members of the specified role.\\r\\n     *\\r\\n     * @param roleKey The key of the role.\\r\\n     * @param start the start index, the value for this index will be included.\\r\\n     * @param end the end index, the value for this index will not be included.\\r\\n     * @return The members of the role.\\r\\n     */\\r\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\r\\n        return roleMembers[roleKey].valuesAt(start, end);\\r\\n    }\\r\\n\\r\\n    function _grantRole(address account, bytes32 roleKey) internal {\\r\\n        roles.add(roleKey);\\r\\n        roleMembers[roleKey].add(account);\\r\\n        roleCache[account][roleKey] = true;\\r\\n    }\\r\\n\\r\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\r\\n        roleMembers[roleKey].remove(account);\\r\\n        roleCache[account][roleKey] = false;\\r\\n\\r\\n        if (roleMembers[roleKey].length() == 0) {\\r\\n            if (roleKey == Role.ROLE_ADMIN) {\\r\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\r\\n            }\\r\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\r\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3ddfdd95ba105725d7f70d8e6ec74858f61aac4a9083ce1ae74a63aa13b96c2c\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Calc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Calc\\r\\n * @dev Library for math functions\\r\\n */\\r\\nlibrary Calc {\\r\\n    using SignedMath for int256;\\r\\n    using SafeCast for uint256;\\r\\n\\r\\n    // this method assumes that min is less than max\\r\\n    function boundMagnitude(int256 value, uint256 min, uint256 max) internal pure returns (int256) {\\r\\n        uint256 magnitude = value.abs();\\r\\n\\r\\n        if (magnitude < min) {\\r\\n            magnitude = min;\\r\\n        }\\r\\n\\r\\n        if (magnitude > max) {\\r\\n            magnitude = max;\\r\\n        }\\r\\n\\r\\n        int256 sign = value == 0 ? int256(1) : value / value.abs().toInt256();\\r\\n\\r\\n        return magnitude.toInt256() * sign;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the result of dividing the first number by the second number,\\r\\n     * rounded up to the nearest integer.\\r\\n     *\\r\\n     * @param a the dividend\\r\\n     * @param b the divisor\\r\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\r\\n     */\\r\\n    function roundUpDivision(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return (a + b - 1) / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculates the result of dividing the first number by the second number,\\r\\n     * rounded up to the nearest integer.\\r\\n     * The rounding is purely on the magnitude of a, if a is negative the result\\r\\n     * is a larger magnitude negative\\r\\n     *\\r\\n     * @param a the dividend\\r\\n     * @param b the divisor\\r\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\r\\n     */\\r\\n    function roundUpMagnitudeDivision(int256 a, uint256 b) internal pure returns (int256) {\\r\\n        if (a < 0) {\\r\\n            return (a - b.toInt256() + 1) / b.toInt256();\\r\\n        }\\r\\n\\r\\n        return (a + b.toInt256() - 1) / b.toInt256();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds two numbers together and return a uint256 value, treating the second number as a signed integer.\\r\\n     *\\r\\n     * @param a the first number\\r\\n     * @param b the second number\\r\\n     * @return the result of adding the two numbers together\\r\\n     */\\r\\n    function sumReturnUint256(uint256 a, int256 b) internal pure returns (uint256) {\\r\\n        if (b > 0) {\\r\\n            return a + b.abs();\\r\\n        }\\r\\n\\r\\n        return a - b.abs();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds two numbers together and return an int256 value, treating the second number as a signed integer.\\r\\n     *\\r\\n     * @param a the first number\\r\\n     * @param b the second number\\r\\n     * @return the result of adding the two numbers together\\r\\n     */\\r\\n    function sumReturnInt256(uint256 a, int256 b) internal pure returns (int256) {\\r\\n        return a.toInt256() + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Calculates the absolute difference between two numbers.\\r\\n     *\\r\\n     * @param a the first number\\r\\n     * @param b the second number\\r\\n     * @return the absolute difference between the two numbers\\r\\n     */\\r\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a > b ? a - b : b - a;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Adds two numbers together, the result is bounded to prevent overflows.\\r\\n     *\\r\\n     * @param a the first number\\r\\n     * @param b the second number\\r\\n     * @return the result of adding the two numbers together\\r\\n     */\\r\\n    function boundedAdd(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // if either a or b is zero or if the signs are different there should not be any overflows\\r\\n        if (a == 0 || b == 0 || (a < 0 && b > 0) || (a > 0 && b < 0)) {\\r\\n            return a + b;\\r\\n        }\\r\\n\\r\\n        // if adding `b` to `a` would result in a value less than the min int256 value\\r\\n        // then return the min int256 value\\r\\n        if (a < 0 && b <= type(int256).min - a) {\\r\\n            return type(int256).min;\\r\\n        }\\r\\n\\r\\n        // if adding `b` to `a` would result in a value more than the max int256 value\\r\\n        // then return the max int256 value\\r\\n        if (a > 0 && b >= type(int256).max - a) {\\r\\n            return type(int256).max;\\r\\n        }\\r\\n\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns a - b, the result is bounded to prevent overflows.\\r\\n     * Note that this will revert if b is type(int256).min because of the usage of \\\"-b\\\".\\r\\n     *\\r\\n     * @param a the first number\\r\\n     * @param b the second number\\r\\n     * @return the bounded result of a - b\\r\\n     */\\r\\n    function boundedSub(int256 a, int256 b) internal pure returns (int256) {\\r\\n        // if either a or b is zero or the signs are the same there should not be any overflow\\r\\n        if (a == 0 || b == 0 || (a > 0 && b > 0) || (a < 0 && b < 0)) {\\r\\n            return a - b;\\r\\n        }\\r\\n\\r\\n        // if adding `-b` to `a` would result in a value greater than the max int256 value\\r\\n        // then return the max int256 value\\r\\n        if (a > 0 && -b >= type(int256).max - a) {\\r\\n            return type(int256).max;\\r\\n        }\\r\\n\\r\\n        // if subtracting `b` from `a` would result in a value less than the min int256 value\\r\\n        // then return the min int256 value\\r\\n        if (a < 0 && -b <= type(int256).min - a) {\\r\\n            return type(int256).min;\\r\\n        }\\r\\n\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Converts the given unsigned integer to a signed integer, using the given\\r\\n     * flag to determine whether the result should be positive or negative.\\r\\n     *\\r\\n     * @param a the unsigned integer to convert\\r\\n     * @param isPositive whether the result should be positive (if true) or negative (if false)\\r\\n     * @return the signed integer representation of the given unsigned integer\\r\\n     */\\r\\n    function toSigned(uint256 a, bool isPositive) internal pure returns (int256) {\\r\\n        if (isPositive) {\\r\\n            return a.toInt256();\\r\\n        } else {\\r\\n            return -a.toInt256();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x897ac8ee1bf9aefe73191d3ff3bea2daaa5de050ea7c44a982981f94a7fb1ae3\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EnumerableValues\\r\\n * @dev Library to extend the EnumerableSet library with functions to get\\r\\n * valuesAt for a range\\r\\n */\\r\\nlibrary EnumerableValues {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    /**\\r\\n     * Returns an array of bytes32 values from the given set, starting at the given\\r\\n     * start index and ending before the given end index.\\r\\n     *\\r\\n     * @param set The set to get the values from.\\r\\n     * @param start The starting index.\\r\\n     * @param end The ending index.\\r\\n     * @return An array of bytes32 values.\\r\\n     */\\r\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\r\\n        uint256 max = set.length();\\r\\n        if (end > max) { end = max; }\\r\\n\\r\\n        bytes32[] memory items = new bytes32[](end - start);\\r\\n        for (uint256 i = start; i < end; i++) {\\r\\n            items[i - start] = set.at(i);\\r\\n        }\\r\\n\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns an array of address values from the given set, starting at the given\\r\\n     * start index and ending before the given end index.\\r\\n     *\\r\\n     * @param set The set to get the values from.\\r\\n     * @param start The starting index.\\r\\n     * @param end The ending index.\\r\\n     * @return An array of address values.\\r\\n     */\\r\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\r\\n        uint256 max = set.length();\\r\\n        if (end > max) { end = max; }\\r\\n\\r\\n        address[] memory items = new address[](end - start);\\r\\n        for (uint256 i = start; i < end; i++) {\\r\\n            items[i - start] = set.at(i);\\r\\n        }\\r\\n\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns an array of uint256 values from the given set, starting at the given\\r\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\r\\n     *\\r\\n     * @param set The set to get the values from.\\r\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\r\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\r\\n     * @return An array of uint256 values.\\r\\n     */\\r\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\r\\n        if (start >= set.length()) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        uint256 max = set.length();\\r\\n        if (end > max) { end = max; }\\r\\n\\r\\n        uint256[] memory items = new uint256[](end - start);\\r\\n        for (uint256 i = start; i < end; i++) {\\r\\n            items[i - start] = set.at(i);\\r\\n        }\\r\\n\\r\\n        return items;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb985a1614407b53bff1842f6d5d7b39525c97e66f580b96936d98396ce16333e\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Printer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Printer\\r\\n * @dev Library for console functions\\r\\n */\\r\\nlibrary Printer {\\r\\n    using SafeCast for int256;\\r\\n\\r\\n    function log(string memory label, int256 value) internal view {\\r\\n        if (value < 0) {\\r\\n            console.log(\\r\\n                \\\"%s -%s\\\",\\r\\n                label,\\r\\n                (-value).toUint256()\\r\\n            );\\r\\n        } else {\\r\\n            console.log(\\r\\n                \\\"%s +%s\\\",\\r\\n                label,\\r\\n                value.toUint256()\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x063e037ed922aa94d1e6e86c0661fdc2220c1feaacdd8f9a4f827885adbc1132\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61410061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101275760003560e01c806304a36e201461012c5780633332c5be1461014757806333d608f11461014f5780633d59fea5146101575780634675e8eb1461015f57806352bc625714610167578063566a6e661461016f57806360aa7068146101775780636ecd534a1461019957806374b6fe13146101a1578063797cb5a2146101c15780638d5dc584146101c95780638f7f2048146101d157806391cb3e3c146101d9578063a31a6411146101e1578063ad7430cc146101e9578063d1550af3146101f1578063d6a3502a146101f9578063e90524f214610201578063ea00f33314610209578063f145e54a14610211578063f46f16c214610219578063fdfc26f314610221575b600080fd5b610134610241565b6040519081526020015b60405180910390f35b610134610269565b610134610278565b610134610287565b610134610296565b6101346102a5565b6101346102b4565b81801561018357600080fd5b50610197610192366004613880565b6102c3565b005b6101346113bb565b8180156101ad57600080fd5b506101976101bc3660046139c2565b6113ca565b6101346122e2565b6101346122f1565b610134612300565b61013461230f565b61013461231e565b61013461232d565b61013461233c565b61013461234b565b61013461235a565b610134612369565b610134612378565b610134612387565b61023461022f366004613a04565b612396565b60405161013e9190613b31565b60405160200161025090613c09565b6040516020818303038152906040528051906020012081565b60405160200161025090613c3d565b60405160200161025090613c5e565b60405160200161025090613c8a565b60405160200161025090613cb4565b60405160200161025090613cdb565b60405160200161025090613cfe565b826001600160a01b031663c80f4c626040516020016102e190613d27565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b8152600401610315929190613d4b565b600060405180830381600087803b15801561032f57600080fd5b505af1158015610343573d6000803e3d6000fd5b50505050826001600160a01b031663c80f4c6261036761036284515190565b61345f565b846040518363ffffffff1660e01b8152600401610385929190613d4b565b600060405180830381600087803b15801561039f57600080fd5b505af11580156103b3573d6000803e3d6000fd5b50505050826001600160a01b031663ca446dd9836040516020016103d690613d59565b604051602081830303815290604052805190602001206040516020016103fd929190613d4b565b6040516020818303038152906040528051906020012061041c84515190565b6040518363ffffffff1660e01b8152600401610439929190613d7a565b6020604051808303816000875af1158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190613d91565b50826001600160a01b031663ca446dd98360405160200161049c90613dae565b604051602081830303815290604052805190602001206040516020016104c3929190613d4b565b604051602081830303815290604052805190602001206104e584516020015190565b6040518363ffffffff1660e01b8152600401610502929190613d7a565b6020604051808303816000875af1158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190613d91565b50826001600160a01b031663ca446dd98360405160200161056590613dd0565b6040516020818303038152906040528051906020012060405160200161058c929190613d4b565b604051602081830303815290604052805190602001206105ae84516040015190565b6040518363ffffffff1660e01b81526004016105cb929190613d7a565b6020604051808303816000875af11580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190613d91565b50826001600160a01b031663ca446dd98360405160200161062e90613cfe565b60405160208183030381529060405280519060200120604051602001610655929190613d4b565b6040516020818303038152906040528051906020012061067784516060015190565b6040518363ffffffff1660e01b8152600401610694929190613d7a565b6020604051808303816000875af11580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190613d91565b50826001600160a01b031663ca446dd9836040516020016106f790613dfb565b6040516020818303038152906040528051906020012060405160200161071e929190613d4b565b6040516020818303038152906040528051906020012061074084516080015190565b6040518363ffffffff1660e01b815260040161075d929190613d7a565b6020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190613d91565b50826001600160a01b031663ca446dd9836040516020016107c090613e1b565b604051602081830303815290604052805190602001206040516020016107e7929190613d4b565b60405160208183030381529060405280519060200120610809845160a0015190565b6040518363ffffffff1660e01b8152600401610826929190613d7a565b6020604051808303816000875af1158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190613d91565b50826001600160a01b031663ec672cf68360405160200161088990613cdb565b604051602081830303815290604052805190602001206040516020016108b0929190613d4b565b604051602081830303815290604052805190602001206108d2845160c0015190565b6040518363ffffffff1660e01b81526004016108ef929190613e4d565b600060405180830381600087803b15801561090957600080fd5b505af115801561091d573d6000803e3d6000fd5b50505050826001600160a01b031663e2a4853a8360405160200161094090613ea4565b60405160208183030381529060405280519060200120604051602001610967929190613d4b565b6040516020818303038152906040528051906020012061098984602001515190565b600781111561099a5761099a613a81565b6040518363ffffffff1660e01b81526004016109b7929190613d4b565b6020604051808303816000875af11580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610a1a90613ee1565b60405160208183030381529060405280519060200120604051602001610a41929190613d4b565b60405160208183030381529060405280519060200120610a6684602090810151015190565b6002811115610a7757610a77613a81565b6040518363ffffffff1660e01b8152600401610a94929190613d4b565b6020604051808303816000875af1158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190613ec8565b50826001600160a01b031663e2a4853a83604051602001610af790613f16565b60405160208183030381529060405280519060200120604051602001610b1e929190613d4b565b60405160208183030381529060405280519060200120610b4384602001516040015190565b6040518363ffffffff1660e01b8152600401610b60929190613d4b565b6020604051808303816000875af1158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba39190613ec8565b50826001600160a01b031663e2a4853a83604051602001610bc390613f3e565b60405160208183030381529060405280519060200120604051602001610bea929190613d4b565b60405160208183030381529060405280519060200120610c0f84602001516060015190565b6040518363ffffffff1660e01b8152600401610c2c929190613d4b565b6020604051808303816000875af1158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610c8f90613f75565b60405160208183030381529060405280519060200120604051602001610cb6929190613d4b565b60405160208183030381529060405280519060200120610cdb84602001516080015190565b6040518363ffffffff1660e01b8152600401610cf8929190613d4b565b6020604051808303816000875af1158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3b9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610d5b90613c8a565b60405160208183030381529060405280519060200120604051602001610d82929190613d4b565b60405160208183030381529060405280519060200120610da7846020015160a0015190565b6040518363ffffffff1660e01b8152600401610dc4929190613d4b565b6020604051808303816000875af1158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190613ec8565b50826001600160a01b031663e2a4853a83604051602001610e2790613cb4565b60405160208183030381529060405280519060200120604051602001610e4e929190613d4b565b60405160208183030381529060405280519060200120610e73846020015160c0015190565b6040518363ffffffff1660e01b8152600401610e90929190613d4b565b6020604051808303816000875af1158015610eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed39190613ec8565b50826001600160a01b031663e2a4853a83604051602001610ef390613c5e565b60405160208183030381529060405280519060200120604051602001610f1a929190613d4b565b60405160208183030381529060405280519060200120610f3f846020015160e0015190565b6040518363ffffffff1660e01b8152600401610f5c929190613d4b565b6020604051808303816000875af1158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610fbf90613f9c565b60405160208183030381529060405280519060200120604051602001610fe6929190613d4b565b6040516020818303038152906040528051906020012061100c8460200151610100015190565b6040518363ffffffff1660e01b8152600401611029929190613d4b565b6020604051808303816000875af1158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190613ec8565b50826001600160a01b031663e2a4853a8360405160200161108c90613fc7565b604051602081830303815290604052805190602001206040516020016110b3929190613d4b565b604051602081830303815290604052805190602001206110d98460200151610120015190565b6040518363ffffffff1660e01b81526004016110f6929190613d4b565b6020604051808303816000875af1158015611115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111399190613ec8565b50826001600160a01b031663abfdcced8360405160200161115990613c3d565b60405160208183030381529060405280519060200120604051602001611180929190613d4b565b604051602081830303815290604052805190602001206111a284604001515190565b6040516001600160e01b031960e085901b1681526004810192909252151560248201526044016020604051808303816000875af11580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b9190613ff1565b50826001600160a01b031663abfdcced8360405160200161122b90613c09565b60405160208183030381529060405280519060200120604051602001611252929190613d4b565b6040516020818303038152906040528051906020012061127784604001516020015190565b6040516001600160e01b031960e085901b1681526004810192909252151560248201526044016020604051808303816000875af11580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190613ff1565b50826001600160a01b031663abfdcced836040516020016113009061400e565b60405160208183030381529060405280519060200120604051602001611327929190613d4b565b6040516020818303038152906040528051906020012061134c84604090810151015190565b6040516001600160e01b031960e085901b1681526004810192909252151560248201526044016020604051808303816000875af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190613ff1565b50505050565b60405160200161025090613f3e565b826001600160a01b03166391d4403c6040516020016113e890613d27565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b815260040161141c929190613d4b565b602060405180830381865afa158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190613ff1565b611481576040516359485ed960e01b81526004810183905260240160405180910390fd5b826001600160a01b0316639921c3cc60405160200161149f90613d27565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b81526004016114d3929190613d4b565b600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50505050826001600160a01b0316639921c3cc61151d8361345f565b846040518363ffffffff1660e01b815260040161153b929190613d4b565b600060405180830381600087803b15801561155557600080fd5b505af1158015611569573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161158c90613d59565b604051602081830303815290604052805190602001206040516020016115b3929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016115e791815260200190565b600060405180830381600087803b15801561160157600080fd5b505af1158015611615573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161163890613dae565b6040516020818303038152906040528051906020012060405160200161165f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161169391815260200190565b600060405180830381600087803b1580156116ad57600080fd5b505af11580156116c1573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb6836040516020016116e490613dd0565b6040516020818303038152906040528051906020012060405160200161170b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161173f91815260200190565b600060405180830381600087803b15801561175957600080fd5b505af115801561176d573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161179090613cfe565b604051602081830303815290604052805190602001206040516020016117b7929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016117eb91815260200190565b600060405180830381600087803b15801561180557600080fd5b505af1158015611819573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161183c90613dfb565b60405160208183030381529060405280519060200120604051602001611863929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161189791815260200190565b600060405180830381600087803b1580156118b157600080fd5b505af11580156118c5573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb6836040516020016118e890613e1b565b6040516020818303038152906040528051906020012060405160200161190f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161194391815260200190565b600060405180830381600087803b15801561195d57600080fd5b505af1158015611971573d6000803e3d6000fd5b50505050826001600160a01b031663c1dc91828360405160200161199490613cdb565b604051602081830303815290604052805190602001206040516020016119bb929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016119ef91815260200190565b600060405180830381600087803b158015611a0957600080fd5b505af1158015611a1d573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611a4090613ea4565b60405160208183030381529060405280519060200120604051602001611a67929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611a9b91815260200190565b600060405180830381600087803b158015611ab557600080fd5b505af1158015611ac9573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611aec90613ee1565b60405160208183030381529060405280519060200120604051602001611b13929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611b4791815260200190565b600060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611b9890613f16565b60405160208183030381529060405280519060200120604051602001611bbf929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611bf391815260200190565b600060405180830381600087803b158015611c0d57600080fd5b505af1158015611c21573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611c4490613f3e565b60405160208183030381529060405280519060200120604051602001611c6b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611c9f91815260200190565b600060405180830381600087803b158015611cb957600080fd5b505af1158015611ccd573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611cf090613f75565b60405160208183030381529060405280519060200120604051602001611d17929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611d4b91815260200190565b600060405180830381600087803b158015611d6557600080fd5b505af1158015611d79573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611d9c90613c8a565b60405160208183030381529060405280519060200120604051602001611dc3929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611df791815260200190565b600060405180830381600087803b158015611e1157600080fd5b505af1158015611e25573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611e4890613cb4565b60405160208183030381529060405280519060200120604051602001611e6f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611ea391815260200190565b600060405180830381600087803b158015611ebd57600080fd5b505af1158015611ed1573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611ef490613c5e565b60405160208183030381529060405280519060200120604051602001611f1b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f4f91815260200190565b600060405180830381600087803b158015611f6957600080fd5b505af1158015611f7d573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611fa090613f9c565b60405160208183030381529060405280519060200120604051602001611fc7929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611ffb91815260200190565b600060405180830381600087803b15801561201557600080fd5b505af1158015612029573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd968360405160200161204c90613fc7565b60405160208183030381529060405280519060200120604051602001612073929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016120a791815260200190565b600060405180830381600087803b1580156120c157600080fd5b505af11580156120d5573d6000803e3d6000fd5b50505050826001600160a01b0316639fe7ac12836040516020016120f890613c3d565b6040516020818303038152906040528051906020012060405160200161211f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161215391815260200190565b600060405180830381600087803b15801561216d57600080fd5b505af1158015612181573d6000803e3d6000fd5b50505050826001600160a01b0316639fe7ac12836040516020016121a490613c09565b604051602081830303815290604052805190602001206040516020016121cb929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016121ff91815260200190565b600060405180830381600087803b15801561221957600080fd5b505af115801561222d573d6000803e3d6000fd5b50505050826001600160a01b0316639fe7ac12836040516020016122509061400e565b60405160208183030381529060405280519060200120604051602001612277929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016122ab91815260200190565b600060405180830381600087803b1580156122c557600080fd5b505af11580156122d9573d6000803e3d6000fd5b50505050505050565b60405160200161025090613f9c565b60405160200161025090613e1b565b60405160200161025090613dd0565b6040516020016102509061400e565b60405160200161025090613f75565b60405160200161025090613dae565b60405160200161025090613ee1565b60405160200161025090613f16565b60405160200161025090613d59565b60405160200161025090613ea4565b60405160200161025090613fc7565b60405160200161025090613dfb565b61239e613539565b6123a6613539565b836001600160a01b03166391d4403c6040516020016123c490613d27565b60405160208183030381529060405280519060200120856040518363ffffffff1660e01b81526004016123f8929190613d4b565b602060405180830381865afa158015612415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124399190613ff1565b612444579050613459565b612513846001600160a01b03166321f8a7218560405160200161246690613d59565b6040516020818303038152906040528051906020012060405160200161248d929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016124c191815260200190565b602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125029190613d91565b82516001600160a01b039091169052565b6125e6846001600160a01b03166321f8a7218560405160200161253590613dae565b6040516020818303038152906040528051906020012060405160200161255c929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161259091815260200190565b602060405180830381865afa1580156125ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d19190613d91565b82516001600160a01b03909116602090910152565b6126b9846001600160a01b03166321f8a7218560405160200161260890613dd0565b6040516020818303038152906040528051906020012060405160200161262f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161266391815260200190565b602060405180830381865afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a49190613d91565b82516001600160a01b03909116604090910152565b61278c846001600160a01b03166321f8a721856040516020016126db90613cfe565b60405160208183030381529060405280519060200120604051602001612702929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161273691815260200190565b602060405180830381865afa158015612753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127779190613d91565b82516001600160a01b03909116606090910152565b61285f846001600160a01b03166321f8a721856040516020016127ae90613dfb565b604051602081830303815290604052805190602001206040516020016127d5929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161280991815260200190565b602060405180830381865afa158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190613d91565b82516001600160a01b03909116608090910152565b612932846001600160a01b03166321f8a7218560405160200161288190613e1b565b604051602081830303815290604052805190602001206040516020016128a8929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016128dc91815260200190565b602060405180830381865afa1580156128f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291d9190613d91565b82516001600160a01b0390911660a090910152565b6129fc846001600160a01b0316635948f7338560405160200161295490613cdb565b6040516020818303038152906040528051906020012060405160200161297b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016129af91815260200190565b600060405180830381865afa1580156129cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f49190810190614031565b825160c00152565b612ad2846001600160a01b031663bd02d0f585604051602001612a1e90613ea4565b60405160208183030381529060405280519060200120604051602001612a45929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612a7991815260200190565b602060405180830381865afa158015612a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aba9190613ec8565b6007811115612acb57612acb613a81565b82906134dc565b612ba8846001600160a01b031663bd02d0f585604051602001612af490613ee1565b60405160208183030381529060405280519060200120604051602001612b1b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612b4f91815260200190565b602060405180830381865afa158015612b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b909190613ec8565b6002811115612ba157612ba1613a81565b829061350d565b612c71846001600160a01b031663bd02d0f585604051602001612bca90613f16565b60405160208183030381529060405280519060200120604051602001612bf1929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612c2591815260200190565b602060405180830381865afa158015612c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c669190613ec8565b602083015160400152565b612d3a846001600160a01b031663bd02d0f585604051602001612c9390613f3e565b60405160208183030381529060405280519060200120604051602001612cba929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612cee91815260200190565b602060405180830381865afa158015612d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2f9190613ec8565b602083015160600152565b612e03846001600160a01b031663bd02d0f585604051602001612d5c90613f75565b60405160208183030381529060405280519060200120604051602001612d83929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612db791815260200190565b602060405180830381865afa158015612dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df89190613ec8565b602083015160800152565b612ecc846001600160a01b031663bd02d0f585604051602001612e2590613c8a565b60405160208183030381529060405280519060200120604051602001612e4c929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612e8091815260200190565b602060405180830381865afa158015612e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec19190613ec8565b602083015160a00152565b612f95846001600160a01b031663bd02d0f585604051602001612eee90613cb4565b60405160208183030381529060405280519060200120604051602001612f15929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612f4991815260200190565b602060405180830381865afa158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8a9190613ec8565b602083015160c00152565b61305e846001600160a01b031663bd02d0f585604051602001612fb790613c5e565b60405160208183030381529060405280519060200120604051602001612fde929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161301291815260200190565b602060405180830381865afa15801561302f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130539190613ec8565b602083015160e00152565b613128846001600160a01b031663bd02d0f58560405160200161308090613f9c565b604051602081830303815290604052805190602001206040516020016130a7929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016130db91815260200190565b602060405180830381865afa1580156130f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311c9190613ec8565b60208301516101000152565b6131f2846001600160a01b031663bd02d0f58560405160200161314a90613fc7565b60405160208183030381529060405280519060200120604051602001613171929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016131a591815260200190565b602060405180830381865afa1580156131c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e69190613ec8565b60208301516101200152565b6132bc846001600160a01b0316637ae1cfca8560405160200161321490613c3d565b6040516020818303038152906040528051906020012060405160200161323b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161326f91815260200190565b602060405180830381865afa15801561328c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b09190613ff1565b60408301519015159052565b61338a846001600160a01b0316637ae1cfca856040516020016132de90613c09565b60405160208183030381529060405280519060200120604051602001613305929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161333991815260200190565b602060405180830381865afa158015613356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337a9190613ff1565b6040830151901515602090910152565b613456846001600160a01b0316637ae1cfca856040516020016133ac9061400e565b604051602081830303815290604052805190602001206040516020016133d3929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161340791815260200190565b602060405180830381865afa158015613424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134489190613ff1565b604080840151911515910152565b90505b92915050565b6000604051602001613497906020808252601290820152711050d0d3d5539517d3d491115497d31254d560721b604082015260600190565b60405160208183030381529060405280519060200120826040516020016134bf929190613d7a565b604051602081830303815290604052805190602001209050919050565b60208201518160078111156134f3576134f3613a81565b9081600781111561350657613506613a81565b9052505050565b6020808301510181600281111561352657613526613a81565b9081600281111561350657613506613a81565b604080516101408101909152600060608083018281526080840183905260a0840183905260c0840183905260e084018390526101008401929092526101208301528152602081016135d760408051610140810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260408051606081018252600080825260208281018290529282015291015290565b6001600160a01b038116811461360f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561364b5761364b613612565b60405290565b604051606081016001600160401b038111828210171561364b5761364b613612565b60405160e081016001600160401b038111828210171561364b5761364b613612565b604051601f8201601f191681016001600160401b03811182821017156136bd576136bd613612565b604052919050565b80356136d0816135fa565b919050565b60006001600160401b038211156136ee576136ee613612565b5060051b60200190565b600082601f83011261370957600080fd5b8135602061371e613719836136d5565b613695565b82815260059290921b8401810191818101908684111561373d57600080fd5b8286015b84811015613761578035613754816135fa565b8352918301918301613741565b509695505050505050565b8035600881106136d057600080fd5b8035600381106136d057600080fd5b6000610140828403121561379d57600080fd5b6137a5613628565b90506137b08261376c565b81526137be6020830161377b565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b801515811461360f57600080fd5b60006060828403121561383d57600080fd5b613845613651565b905081356138528161381d565b815260208201356138628161381d565b602082015260408201356138758161381d565b604082015292915050565b60008060006060848603121561389557600080fd5b83356138a0816135fa565b92506020840135915060408401356001600160401b03808211156138c357600080fd5b908501906101c082880312156138d857600080fd5b6138e0613651565b8235828111156138ef57600080fd5b830160e0818a03121561390157600080fd5b613909613673565b613912826136c5565b8152613920602083016136c5565b6020820152613931604083016136c5565b6040820152613942606083016136c5565b6060820152613953608083016136c5565b608082015261396460a083016136c5565b60a082015260c08201358481111561397b57600080fd5b6139878b8285016136f8565b60c08301525082525061399d886020850161378a565b60208201526139b088610160850161382b565b60408201528093505050509250925092565b6000806000606084860312156139d757600080fd5b83356139e2816135fa565b92506020840135915060408401356139f9816135fa565b809150509250925092565b60008060408385031215613a1757600080fd5b8235613a22816135fa565b946020939093013593505050565b6001600160a01b03169052565b600081518084526020808501945080840160005b83811015613a765781516001600160a01b031687529582019590820190600101613a51565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60088110613aa757613aa7613a81565b9052565b60038110613aa757613aa7613a81565b613ac6828251613a97565b6020810151613ad86020840182613aab565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152505050565b60208152600082516101c0602084015260018060a01b03808251166101e08501528060208301511661020085015280604083015116610220850152506060810151613b80610240850182613a30565b506080810151613b94610260850182613a30565b5060a0810151613ba8610280850182613a30565b5060c0015160e06102a0840152613bc36102c0840182613a3d565b90506020840151613bd76040850182613abb565b5060408481015180511515610180860152602081015115156101a08601529081015115156101c0850152509392505050565b6020808252601a908201527929a427aaa6222faaa72ba920a82fa720aa24ab22afaa27a5a2a760311b604082015260600190565b60208082526007908201526649535f4c4f4e4760c81b604082015260600190565b60208082526012908201527110d05313109050d2d7d1d054d7d31253525560721b604082015260600190565b60208082526010908201526f41434345505441424c455f505249434560801b604082015260600190565b6020808252600d908201526c455845435554494f4e5f46454560981b604082015260600190565b6020808252600990820152680a6ae82a0bea082a8960bb1b604082015260600190565b6020808252600f908201526e2aa4afa322a2afa922a1a2a4ab22a960891b604082015260600190565b6020808252600a908201526913d491115497d31254d560b21b604082015260600190565b918252602082015260400190565b6020808252600790820152661050d0d3d5539560ca1b604082015260600190565b9182526001600160a01b0316602082015260400190565b600060208284031215613da357600080fd5b8151613456816135fa565b6020808252600890820152672922a1a2a4ab22a960c11b604082015260600190565b60208082526011908201527010d05313109050d2d7d0d3d395149050d5607a1b604082015260600190565b60208082526006908201526513505492d15560d21b604082015260600190565b60208082526018908201527724a724aa24a0a62fa1a7a62620aa22a920a62faa27a5a2a760411b604082015260600190565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015613e975784516001600160a01b031683529383019391830191600101613e72565b5090979650505050505050565b6020808252600a90820152694f524445525f5459504560b01b604082015260600190565b600060208284031215613eda57600080fd5b5051919050565b6020808252601b908201527a44454352454153455f504f534954494f4e5f535741505f5459504560281b604082015260600190565b6020808252600e908201526d14d2569157d11153151057d554d160921b604082015260600190565b6020808252601f908201527f494e495449414c5f434f4c4c41544552414c5f44454c54415f414d4f554e5400604082015260600190565b6020808252600d908201526c545249474745525f505249434560981b604082015260600190565b60208082526011908201527013525397d3d55514155517d05353d55395607a1b604082015260600190565b60208082526010908201526f555044415445445f41545f424c4f434b60801b604082015260600190565b60006020828403121561400357600080fd5b81516134568161381d565b60208082526009908201526824a9afa32927ad22a760b91b604082015260600190565b6000602080838503121561404457600080fd5b82516001600160401b0381111561405a57600080fd5b8301601f8101851361406b57600080fd5b8051614079613719826136d5565b81815260059190911b8201830190838101908783111561409857600080fd5b928401925b828410156140bf5783516140b0816135fa565b8252928401929084019061409d565b97965050505050505056fea2646970667358221220ce9c573da79f87b7096c5c390244d60feced977be931016ed06d69c677cdc63364736f6c63430008120033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101275760003560e01c806304a36e201461012c5780633332c5be1461014757806333d608f11461014f5780633d59fea5146101575780634675e8eb1461015f57806352bc625714610167578063566a6e661461016f57806360aa7068146101775780636ecd534a1461019957806374b6fe13146101a1578063797cb5a2146101c15780638d5dc584146101c95780638f7f2048146101d157806391cb3e3c146101d9578063a31a6411146101e1578063ad7430cc146101e9578063d1550af3146101f1578063d6a3502a146101f9578063e90524f214610201578063ea00f33314610209578063f145e54a14610211578063f46f16c214610219578063fdfc26f314610221575b600080fd5b610134610241565b6040519081526020015b60405180910390f35b610134610269565b610134610278565b610134610287565b610134610296565b6101346102a5565b6101346102b4565b81801561018357600080fd5b50610197610192366004613880565b6102c3565b005b6101346113bb565b8180156101ad57600080fd5b506101976101bc3660046139c2565b6113ca565b6101346122e2565b6101346122f1565b610134612300565b61013461230f565b61013461231e565b61013461232d565b61013461233c565b61013461234b565b61013461235a565b610134612369565b610134612378565b610134612387565b61023461022f366004613a04565b612396565b60405161013e9190613b31565b60405160200161025090613c09565b6040516020818303038152906040528051906020012081565b60405160200161025090613c3d565b60405160200161025090613c5e565b60405160200161025090613c8a565b60405160200161025090613cb4565b60405160200161025090613cdb565b60405160200161025090613cfe565b826001600160a01b031663c80f4c626040516020016102e190613d27565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b8152600401610315929190613d4b565b600060405180830381600087803b15801561032f57600080fd5b505af1158015610343573d6000803e3d6000fd5b50505050826001600160a01b031663c80f4c6261036761036284515190565b61345f565b846040518363ffffffff1660e01b8152600401610385929190613d4b565b600060405180830381600087803b15801561039f57600080fd5b505af11580156103b3573d6000803e3d6000fd5b50505050826001600160a01b031663ca446dd9836040516020016103d690613d59565b604051602081830303815290604052805190602001206040516020016103fd929190613d4b565b6040516020818303038152906040528051906020012061041c84515190565b6040518363ffffffff1660e01b8152600401610439929190613d7a565b6020604051808303816000875af1158015610458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047c9190613d91565b50826001600160a01b031663ca446dd98360405160200161049c90613dae565b604051602081830303815290604052805190602001206040516020016104c3929190613d4b565b604051602081830303815290604052805190602001206104e584516020015190565b6040518363ffffffff1660e01b8152600401610502929190613d7a565b6020604051808303816000875af1158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190613d91565b50826001600160a01b031663ca446dd98360405160200161056590613dd0565b6040516020818303038152906040528051906020012060405160200161058c929190613d4b565b604051602081830303815290604052805190602001206105ae84516040015190565b6040518363ffffffff1660e01b81526004016105cb929190613d7a565b6020604051808303816000875af11580156105ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060e9190613d91565b50826001600160a01b031663ca446dd98360405160200161062e90613cfe565b60405160208183030381529060405280519060200120604051602001610655929190613d4b565b6040516020818303038152906040528051906020012061067784516060015190565b6040518363ffffffff1660e01b8152600401610694929190613d7a565b6020604051808303816000875af11580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190613d91565b50826001600160a01b031663ca446dd9836040516020016106f790613dfb565b6040516020818303038152906040528051906020012060405160200161071e929190613d4b565b6040516020818303038152906040528051906020012061074084516080015190565b6040518363ffffffff1660e01b815260040161075d929190613d7a565b6020604051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a09190613d91565b50826001600160a01b031663ca446dd9836040516020016107c090613e1b565b604051602081830303815290604052805190602001206040516020016107e7929190613d4b565b60405160208183030381529060405280519060200120610809845160a0015190565b6040518363ffffffff1660e01b8152600401610826929190613d7a565b6020604051808303816000875af1158015610845573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108699190613d91565b50826001600160a01b031663ec672cf68360405160200161088990613cdb565b604051602081830303815290604052805190602001206040516020016108b0929190613d4b565b604051602081830303815290604052805190602001206108d2845160c0015190565b6040518363ffffffff1660e01b81526004016108ef929190613e4d565b600060405180830381600087803b15801561090957600080fd5b505af115801561091d573d6000803e3d6000fd5b50505050826001600160a01b031663e2a4853a8360405160200161094090613ea4565b60405160208183030381529060405280519060200120604051602001610967929190613d4b565b6040516020818303038152906040528051906020012061098984602001515190565b600781111561099a5761099a613a81565b6040518363ffffffff1660e01b81526004016109b7929190613d4b565b6020604051808303816000875af11580156109d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fa9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610a1a90613ee1565b60405160208183030381529060405280519060200120604051602001610a41929190613d4b565b60405160208183030381529060405280519060200120610a6684602090810151015190565b6002811115610a7757610a77613a81565b6040518363ffffffff1660e01b8152600401610a94929190613d4b565b6020604051808303816000875af1158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190613ec8565b50826001600160a01b031663e2a4853a83604051602001610af790613f16565b60405160208183030381529060405280519060200120604051602001610b1e929190613d4b565b60405160208183030381529060405280519060200120610b4384602001516040015190565b6040518363ffffffff1660e01b8152600401610b60929190613d4b565b6020604051808303816000875af1158015610b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba39190613ec8565b50826001600160a01b031663e2a4853a83604051602001610bc390613f3e565b60405160208183030381529060405280519060200120604051602001610bea929190613d4b565b60405160208183030381529060405280519060200120610c0f84602001516060015190565b6040518363ffffffff1660e01b8152600401610c2c929190613d4b565b6020604051808303816000875af1158015610c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6f9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610c8f90613f75565b60405160208183030381529060405280519060200120604051602001610cb6929190613d4b565b60405160208183030381529060405280519060200120610cdb84602001516080015190565b6040518363ffffffff1660e01b8152600401610cf8929190613d4b565b6020604051808303816000875af1158015610d17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3b9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610d5b90613c8a565b60405160208183030381529060405280519060200120604051602001610d82929190613d4b565b60405160208183030381529060405280519060200120610da7846020015160a0015190565b6040518363ffffffff1660e01b8152600401610dc4929190613d4b565b6020604051808303816000875af1158015610de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e079190613ec8565b50826001600160a01b031663e2a4853a83604051602001610e2790613cb4565b60405160208183030381529060405280519060200120604051602001610e4e929190613d4b565b60405160208183030381529060405280519060200120610e73846020015160c0015190565b6040518363ffffffff1660e01b8152600401610e90929190613d4b565b6020604051808303816000875af1158015610eaf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed39190613ec8565b50826001600160a01b031663e2a4853a83604051602001610ef390613c5e565b60405160208183030381529060405280519060200120604051602001610f1a929190613d4b565b60405160208183030381529060405280519060200120610f3f846020015160e0015190565b6040518363ffffffff1660e01b8152600401610f5c929190613d4b565b6020604051808303816000875af1158015610f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9f9190613ec8565b50826001600160a01b031663e2a4853a83604051602001610fbf90613f9c565b60405160208183030381529060405280519060200120604051602001610fe6929190613d4b565b6040516020818303038152906040528051906020012061100c8460200151610100015190565b6040518363ffffffff1660e01b8152600401611029929190613d4b565b6020604051808303816000875af1158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190613ec8565b50826001600160a01b031663e2a4853a8360405160200161108c90613fc7565b604051602081830303815290604052805190602001206040516020016110b3929190613d4b565b604051602081830303815290604052805190602001206110d98460200151610120015190565b6040518363ffffffff1660e01b81526004016110f6929190613d4b565b6020604051808303816000875af1158015611115573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111399190613ec8565b50826001600160a01b031663abfdcced8360405160200161115990613c3d565b60405160208183030381529060405280519060200120604051602001611180929190613d4b565b604051602081830303815290604052805190602001206111a284604001515190565b6040516001600160e01b031960e085901b1681526004810192909252151560248201526044016020604051808303816000875af11580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b9190613ff1565b50826001600160a01b031663abfdcced8360405160200161122b90613c09565b60405160208183030381529060405280519060200120604051602001611252929190613d4b565b6040516020818303038152906040528051906020012061127784604001516020015190565b6040516001600160e01b031960e085901b1681526004810192909252151560248201526044016020604051808303816000875af11580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190613ff1565b50826001600160a01b031663abfdcced836040516020016113009061400e565b60405160208183030381529060405280519060200120604051602001611327929190613d4b565b6040516020818303038152906040528051906020012061134c84604090810151015190565b6040516001600160e01b031960e085901b1681526004810192909252151560248201526044016020604051808303816000875af1158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190613ff1565b50505050565b60405160200161025090613f3e565b826001600160a01b03166391d4403c6040516020016113e890613d27565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b815260040161141c929190613d4b565b602060405180830381865afa158015611439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145d9190613ff1565b611481576040516359485ed960e01b81526004810183905260240160405180910390fd5b826001600160a01b0316639921c3cc60405160200161149f90613d27565b60405160208183030381529060405280519060200120846040518363ffffffff1660e01b81526004016114d3929190613d4b565b600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50505050826001600160a01b0316639921c3cc61151d8361345f565b846040518363ffffffff1660e01b815260040161153b929190613d4b565b600060405180830381600087803b15801561155557600080fd5b505af1158015611569573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161158c90613d59565b604051602081830303815290604052805190602001206040516020016115b3929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016115e791815260200190565b600060405180830381600087803b15801561160157600080fd5b505af1158015611615573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161163890613dae565b6040516020818303038152906040528051906020012060405160200161165f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161169391815260200190565b600060405180830381600087803b1580156116ad57600080fd5b505af11580156116c1573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb6836040516020016116e490613dd0565b6040516020818303038152906040528051906020012060405160200161170b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161173f91815260200190565b600060405180830381600087803b15801561175957600080fd5b505af115801561176d573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161179090613cfe565b604051602081830303815290604052805190602001206040516020016117b7929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016117eb91815260200190565b600060405180830381600087803b15801561180557600080fd5b505af1158015611819573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb68360405160200161183c90613dfb565b60405160208183030381529060405280519060200120604051602001611863929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161189791815260200190565b600060405180830381600087803b1580156118b157600080fd5b505af11580156118c5573d6000803e3d6000fd5b50505050826001600160a01b0316639faf6fb6836040516020016118e890613e1b565b6040516020818303038152906040528051906020012060405160200161190f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161194391815260200190565b600060405180830381600087803b15801561195d57600080fd5b505af1158015611971573d6000803e3d6000fd5b50505050826001600160a01b031663c1dc91828360405160200161199490613cdb565b604051602081830303815290604052805190602001206040516020016119bb929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016119ef91815260200190565b600060405180830381600087803b158015611a0957600080fd5b505af1158015611a1d573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611a4090613ea4565b60405160208183030381529060405280519060200120604051602001611a67929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611a9b91815260200190565b600060405180830381600087803b158015611ab557600080fd5b505af1158015611ac9573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611aec90613ee1565b60405160208183030381529060405280519060200120604051602001611b13929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611b4791815260200190565b600060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611b9890613f16565b60405160208183030381529060405280519060200120604051602001611bbf929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611bf391815260200190565b600060405180830381600087803b158015611c0d57600080fd5b505af1158015611c21573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611c4490613f3e565b60405160208183030381529060405280519060200120604051602001611c6b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611c9f91815260200190565b600060405180830381600087803b158015611cb957600080fd5b505af1158015611ccd573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611cf090613f75565b60405160208183030381529060405280519060200120604051602001611d17929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611d4b91815260200190565b600060405180830381600087803b158015611d6557600080fd5b505af1158015611d79573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611d9c90613c8a565b60405160208183030381529060405280519060200120604051602001611dc3929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611df791815260200190565b600060405180830381600087803b158015611e1157600080fd5b505af1158015611e25573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611e4890613cb4565b60405160208183030381529060405280519060200120604051602001611e6f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611ea391815260200190565b600060405180830381600087803b158015611ebd57600080fd5b505af1158015611ed1573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611ef490613c5e565b60405160208183030381529060405280519060200120604051602001611f1b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611f4f91815260200190565b600060405180830381600087803b158015611f6957600080fd5b505af1158015611f7d573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd9683604051602001611fa090613f9c565b60405160208183030381529060405280519060200120604051602001611fc7929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401611ffb91815260200190565b600060405180830381600087803b15801561201557600080fd5b505af1158015612029573d6000803e3d6000fd5b50505050826001600160a01b03166342c3bd968360405160200161204c90613fc7565b60405160208183030381529060405280519060200120604051602001612073929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016120a791815260200190565b600060405180830381600087803b1580156120c157600080fd5b505af11580156120d5573d6000803e3d6000fd5b50505050826001600160a01b0316639fe7ac12836040516020016120f890613c3d565b6040516020818303038152906040528051906020012060405160200161211f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161215391815260200190565b600060405180830381600087803b15801561216d57600080fd5b505af1158015612181573d6000803e3d6000fd5b50505050826001600160a01b0316639fe7ac12836040516020016121a490613c09565b604051602081830303815290604052805190602001206040516020016121cb929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016121ff91815260200190565b600060405180830381600087803b15801561221957600080fd5b505af115801561222d573d6000803e3d6000fd5b50505050826001600160a01b0316639fe7ac12836040516020016122509061400e565b60405160208183030381529060405280519060200120604051602001612277929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016122ab91815260200190565b600060405180830381600087803b1580156122c557600080fd5b505af11580156122d9573d6000803e3d6000fd5b50505050505050565b60405160200161025090613f9c565b60405160200161025090613e1b565b60405160200161025090613dd0565b6040516020016102509061400e565b60405160200161025090613f75565b60405160200161025090613dae565b60405160200161025090613ee1565b60405160200161025090613f16565b60405160200161025090613d59565b60405160200161025090613ea4565b60405160200161025090613fc7565b60405160200161025090613dfb565b61239e613539565b6123a6613539565b836001600160a01b03166391d4403c6040516020016123c490613d27565b60405160208183030381529060405280519060200120856040518363ffffffff1660e01b81526004016123f8929190613d4b565b602060405180830381865afa158015612415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124399190613ff1565b612444579050613459565b612513846001600160a01b03166321f8a7218560405160200161246690613d59565b6040516020818303038152906040528051906020012060405160200161248d929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016124c191815260200190565b602060405180830381865afa1580156124de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125029190613d91565b82516001600160a01b039091169052565b6125e6846001600160a01b03166321f8a7218560405160200161253590613dae565b6040516020818303038152906040528051906020012060405160200161255c929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161259091815260200190565b602060405180830381865afa1580156125ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d19190613d91565b82516001600160a01b03909116602090910152565b6126b9846001600160a01b03166321f8a7218560405160200161260890613dd0565b6040516020818303038152906040528051906020012060405160200161262f929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161266391815260200190565b602060405180830381865afa158015612680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a49190613d91565b82516001600160a01b03909116604090910152565b61278c846001600160a01b03166321f8a721856040516020016126db90613cfe565b60405160208183030381529060405280519060200120604051602001612702929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161273691815260200190565b602060405180830381865afa158015612753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127779190613d91565b82516001600160a01b03909116606090910152565b61285f846001600160a01b03166321f8a721856040516020016127ae90613dfb565b604051602081830303815290604052805190602001206040516020016127d5929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161280991815260200190565b602060405180830381865afa158015612826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284a9190613d91565b82516001600160a01b03909116608090910152565b612932846001600160a01b03166321f8a7218560405160200161288190613e1b565b604051602081830303815290604052805190602001206040516020016128a8929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016128dc91815260200190565b602060405180830381865afa1580156128f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291d9190613d91565b82516001600160a01b0390911660a090910152565b6129fc846001600160a01b0316635948f7338560405160200161295490613cdb565b6040516020818303038152906040528051906020012060405160200161297b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016129af91815260200190565b600060405180830381865afa1580156129cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129f49190810190614031565b825160c00152565b612ad2846001600160a01b031663bd02d0f585604051602001612a1e90613ea4565b60405160208183030381529060405280519060200120604051602001612a45929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612a7991815260200190565b602060405180830381865afa158015612a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aba9190613ec8565b6007811115612acb57612acb613a81565b82906134dc565b612ba8846001600160a01b031663bd02d0f585604051602001612af490613ee1565b60405160208183030381529060405280519060200120604051602001612b1b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612b4f91815260200190565b602060405180830381865afa158015612b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b909190613ec8565b6002811115612ba157612ba1613a81565b829061350d565b612c71846001600160a01b031663bd02d0f585604051602001612bca90613f16565b60405160208183030381529060405280519060200120604051602001612bf1929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612c2591815260200190565b602060405180830381865afa158015612c42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c669190613ec8565b602083015160400152565b612d3a846001600160a01b031663bd02d0f585604051602001612c9390613f3e565b60405160208183030381529060405280519060200120604051602001612cba929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612cee91815260200190565b602060405180830381865afa158015612d0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2f9190613ec8565b602083015160600152565b612e03846001600160a01b031663bd02d0f585604051602001612d5c90613f75565b60405160208183030381529060405280519060200120604051602001612d83929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612db791815260200190565b602060405180830381865afa158015612dd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df89190613ec8565b602083015160800152565b612ecc846001600160a01b031663bd02d0f585604051602001612e2590613c8a565b60405160208183030381529060405280519060200120604051602001612e4c929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612e8091815260200190565b602060405180830381865afa158015612e9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec19190613ec8565b602083015160a00152565b612f95846001600160a01b031663bd02d0f585604051602001612eee90613cb4565b60405160208183030381529060405280519060200120604051602001612f15929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612f4991815260200190565b602060405180830381865afa158015612f66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8a9190613ec8565b602083015160c00152565b61305e846001600160a01b031663bd02d0f585604051602001612fb790613c5e565b60405160208183030381529060405280519060200120604051602001612fde929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161301291815260200190565b602060405180830381865afa15801561302f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130539190613ec8565b602083015160e00152565b613128846001600160a01b031663bd02d0f58560405160200161308090613f9c565b604051602081830303815290604052805190602001206040516020016130a7929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016130db91815260200190565b602060405180830381865afa1580156130f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311c9190613ec8565b60208301516101000152565b6131f2846001600160a01b031663bd02d0f58560405160200161314a90613fc7565b60405160208183030381529060405280519060200120604051602001613171929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016131a591815260200190565b602060405180830381865afa1580156131c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131e69190613ec8565b60208301516101200152565b6132bc846001600160a01b0316637ae1cfca8560405160200161321490613c3d565b6040516020818303038152906040528051906020012060405160200161323b929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161326f91815260200190565b602060405180830381865afa15801561328c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b09190613ff1565b60408301519015159052565b61338a846001600160a01b0316637ae1cfca856040516020016132de90613c09565b60405160208183030381529060405280519060200120604051602001613305929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161333991815260200190565b602060405180830381865afa158015613356573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061337a9190613ff1565b6040830151901515602090910152565b613456846001600160a01b0316637ae1cfca856040516020016133ac9061400e565b604051602081830303815290604052805190602001206040516020016133d3929190613d4b565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161340791815260200190565b602060405180830381865afa158015613424573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134489190613ff1565b604080840151911515910152565b90505b92915050565b6000604051602001613497906020808252601290820152711050d0d3d5539517d3d491115497d31254d560721b604082015260600190565b60405160208183030381529060405280519060200120826040516020016134bf929190613d7a565b604051602081830303815290604052805190602001209050919050565b60208201518160078111156134f3576134f3613a81565b9081600781111561350657613506613a81565b9052505050565b6020808301510181600281111561352657613526613a81565b9081600281111561350657613506613a81565b604080516101408101909152600060608083018281526080840183905260a0840183905260c0840183905260e084018390526101008401929092526101208301528152602081016135d760408051610140810190915280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260408051606081018252600080825260208281018290529282015291015290565b6001600160a01b038116811461360f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561364b5761364b613612565b60405290565b604051606081016001600160401b038111828210171561364b5761364b613612565b60405160e081016001600160401b038111828210171561364b5761364b613612565b604051601f8201601f191681016001600160401b03811182821017156136bd576136bd613612565b604052919050565b80356136d0816135fa565b919050565b60006001600160401b038211156136ee576136ee613612565b5060051b60200190565b600082601f83011261370957600080fd5b8135602061371e613719836136d5565b613695565b82815260059290921b8401810191818101908684111561373d57600080fd5b8286015b84811015613761578035613754816135fa565b8352918301918301613741565b509695505050505050565b8035600881106136d057600080fd5b8035600381106136d057600080fd5b6000610140828403121561379d57600080fd5b6137a5613628565b90506137b08261376c565b81526137be6020830161377b565b602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b801515811461360f57600080fd5b60006060828403121561383d57600080fd5b613845613651565b905081356138528161381d565b815260208201356138628161381d565b602082015260408201356138758161381d565b604082015292915050565b60008060006060848603121561389557600080fd5b83356138a0816135fa565b92506020840135915060408401356001600160401b03808211156138c357600080fd5b908501906101c082880312156138d857600080fd5b6138e0613651565b8235828111156138ef57600080fd5b830160e0818a03121561390157600080fd5b613909613673565b613912826136c5565b8152613920602083016136c5565b6020820152613931604083016136c5565b6040820152613942606083016136c5565b6060820152613953608083016136c5565b608082015261396460a083016136c5565b60a082015260c08201358481111561397b57600080fd5b6139878b8285016136f8565b60c08301525082525061399d886020850161378a565b60208201526139b088610160850161382b565b60408201528093505050509250925092565b6000806000606084860312156139d757600080fd5b83356139e2816135fa565b92506020840135915060408401356139f9816135fa565b809150509250925092565b60008060408385031215613a1757600080fd5b8235613a22816135fa565b946020939093013593505050565b6001600160a01b03169052565b600081518084526020808501945080840160005b83811015613a765781516001600160a01b031687529582019590820190600101613a51565b509495945050505050565b634e487b7160e01b600052602160045260246000fd5b60088110613aa757613aa7613a81565b9052565b60038110613aa757613aa7613a81565b613ac6828251613a97565b6020810151613ad86020840182613aab565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152505050565b60208152600082516101c0602084015260018060a01b03808251166101e08501528060208301511661020085015280604083015116610220850152506060810151613b80610240850182613a30565b506080810151613b94610260850182613a30565b5060a0810151613ba8610280850182613a30565b5060c0015160e06102a0840152613bc36102c0840182613a3d565b90506020840151613bd76040850182613abb565b5060408481015180511515610180860152602081015115156101a08601529081015115156101c0850152509392505050565b6020808252601a908201527929a427aaa6222faaa72ba920a82fa720aa24ab22afaa27a5a2a760311b604082015260600190565b60208082526007908201526649535f4c4f4e4760c81b604082015260600190565b60208082526012908201527110d05313109050d2d7d1d054d7d31253525560721b604082015260600190565b60208082526010908201526f41434345505441424c455f505249434560801b604082015260600190565b6020808252600d908201526c455845435554494f4e5f46454560981b604082015260600190565b6020808252600990820152680a6ae82a0bea082a8960bb1b604082015260600190565b6020808252600f908201526e2aa4afa322a2afa922a1a2a4ab22a960891b604082015260600190565b6020808252600a908201526913d491115497d31254d560b21b604082015260600190565b918252602082015260400190565b6020808252600790820152661050d0d3d5539560ca1b604082015260600190565b9182526001600160a01b0316602082015260400190565b600060208284031215613da357600080fd5b8151613456816135fa565b6020808252600890820152672922a1a2a4ab22a960c11b604082015260600190565b60208082526011908201527010d05313109050d2d7d0d3d395149050d5607a1b604082015260600190565b60208082526006908201526513505492d15560d21b604082015260600190565b60208082526018908201527724a724aa24a0a62fa1a7a62620aa22a920a62faa27a5a2a760411b604082015260600190565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015613e975784516001600160a01b031683529383019391830191600101613e72565b5090979650505050505050565b6020808252600a90820152694f524445525f5459504560b01b604082015260600190565b600060208284031215613eda57600080fd5b5051919050565b6020808252601b908201527a44454352454153455f504f534954494f4e5f535741505f5459504560281b604082015260600190565b6020808252600e908201526d14d2569157d11153151057d554d160921b604082015260600190565b6020808252601f908201527f494e495449414c5f434f4c4c41544552414c5f44454c54415f414d4f554e5400604082015260600190565b6020808252600d908201526c545249474745525f505249434560981b604082015260600190565b60208082526011908201527013525397d3d55514155517d05353d55395607a1b604082015260600190565b60208082526010908201526f555044415445445f41545f424c4f434b60801b604082015260600190565b60006020828403121561400357600080fd5b81516134568161381d565b60208082526009908201526824a9afa32927ad22a760b91b604082015260600190565b6000602080838503121561404457600080fd5b82516001600160401b0381111561405a57600080fd5b8301601f8101851361406b57600080fd5b8051614079613719826136d5565b81815260059190911b8201830190838101908783111561409857600080fd5b928401925b828410156140bf5783516140b0816135fa565b8252928401929084019061409d565b97965050505050505056fea2646970667358221220ce9c573da79f87b7096c5c390244d60feced977be931016ed06d69c677cdc63364736f6c63430008120033",
  "libraries": {},
  "devdoc": {
    "details": "Library for order storage functions",
    "kind": "dev",
    "methods": {},
    "title": "OrderStoreUtils",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}