{
  "address": "0x6DCDe077260c9A21F5eb51B0190BFb586CB94bbd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        },
        {
          "internalType": "contract EventEmitter",
          "name": "_eventEmitter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "role",
          "type": "string"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitter",
      "outputs": [
        {
          "internalType": "contract EventEmitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSignerCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "name": "getSigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleStore",
      "outputs": [
        {
          "internalType": "contract RoleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x352c42b8992e9fa5fe0dfe7b8fcbadfd1a4e2fd748753ec0ae04a0b99be0c6d2",
  "receipt": {
    "to": null,
    "from": "0xbF13755c11F362E59B3df8BCadA06CAf1C2cdB99",
    "contractAddress": "0x6DCDe077260c9A21F5eb51B0190BFb586CB94bbd",
    "transactionIndex": 2,
    "gasUsed": "1162029",
    "logsBloom": "0x
    "blockHash": "0xb129f23ba16ffb1c203ae619a83ee585551ecbd02a734914c5b7bed3b580256b",
    "transactionHash": "0x352c42b8992e9fa5fe0dfe7b8fcbadfd1a4e2fd748753ec0ae04a0b99be0c6d2",
    "logs": [],
    "blockNumber": 36399966,
    "cumulativeGasUsed": "1442696",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x974f6518e6E9440D26352505d829b08e656A6c98",
    "0x0a7A97dAbbDfd21b1cdfDdDe8989bD7dC6330502"
  ],
  "numDeployments": 1,
  "solcInputHash": "0156edc567de6ea182d3907607577999",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"},{\"internalType\":\"contract EventEmitter\",\"name\":\"_eventEmitter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"role\",\"type\":\"string\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitter\",\"outputs\":[{\"internalType\":\"contract EventEmitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleStore\",\"outputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/OracleStore.sol\":\"OracleStore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Errors {\\r\\n    // AdlHandler errors\\r\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\r\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\r\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\r\\n\\r\\n    // AdlUtils errors\\r\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\r\\n    error AdlNotEnabled();\\r\\n\\r\\n    // Bank errors\\r\\n    error SelfTransferNotSupported(address receiver);\\r\\n    error InvalidNativeTokenSender(address msgSender);\\r\\n\\r\\n    // BaseRouter\\r\\n    error CouldNotSendNativeToken(address receiver, uint256 amount);\\r\\n\\r\\n    // CallbackUtils errors\\r\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\r\\n\\r\\n    // Config errors\\r\\n    error InvalidBaseKey(bytes32 baseKey);\\r\\n    error InvalidFeeFactor(bytes32 baseKey, uint256 value);\\r\\n\\r\\n    // Timelock errors\\r\\n    error ActionAlreadySignalled();\\r\\n    error ActionNotSignalled();\\r\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\r\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\r\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\r\\n    error InvalidFeeReceiver(address receiver);\\r\\n    error InvalidOracleSigner(address receiver);\\r\\n\\r\\n    // DepositStoreUtils errors\\r\\n    error DepositNotFound(bytes32 key);\\r\\n\\r\\n    // DepositUtils errors\\r\\n    error EmptyDeposit();\\r\\n    error EmptyDepositAmounts();\\r\\n\\r\\n    // ExecuteDepositUtils errors\\r\\n    error MinMarketTokens(uint256 received, uint256 expected);\\r\\n    error EmptyDepositAmountsAfterSwap();\\r\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\r\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\r\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\r\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\r\\n\\r\\n    // ExchangeUtils errors\\r\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\r\\n\\r\\n    // ExternalHandler errors\\r\\n    error ExternalCallFailed(bytes data);\\r\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\r\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\r\\n    error InvalidExternalCallTarget(address target);\\r\\n\\r\\n    // FeeBatchStoreUtils errors\\r\\n    error FeeBatchNotFound(bytes32 key);\\r\\n\\r\\n    // FeeDistributor errors\\r\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\r\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\r\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\r\\n\\r\\n    // GlpMigrator errors\\r\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\r\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\r\\n\\r\\n    // OrderHandler errors\\r\\n    error OrderNotUpdatable(uint256 orderType);\\r\\n    error InvalidKeeperForFrozenOrder(address keeper);\\r\\n\\r\\n    // FeatureUtils errors\\r\\n    error DisabledFeature(bytes32 key);\\r\\n\\r\\n    // FeeHandler errors\\r\\n    error InvalidClaimFeesInput(uint256 marketsLength, uint256 tokensLength);\\r\\n\\r\\n    // GasUtils errors\\r\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\r\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\r\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\r\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\r\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\r\\n\\r\\n    // MarketFactory errors\\r\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\r\\n\\r\\n    // MarketStoreUtils errors\\r\\n    error MarketNotFound(address key);\\r\\n\\r\\n    // MarketUtils errors\\r\\n    error EmptyMarket();\\r\\n    error DisabledMarket(address market);\\r\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\r\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\r\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\r\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\r\\n    error UnableToGetOppositeToken(address inputToken, address market);\\r\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\r\\n    error EmptyMarketTokenSupply();\\r\\n    error InvalidSwapMarket(address market);\\r\\n    error UnableToGetCachedTokenPrice(address token, address market);\\r\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\r\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\r\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\r\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\r\\n    error MaxPoolAmountForDepositExceeded(uint256 poolAmount, uint256 maxPoolAmountForDeposit);\\r\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\r\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\r\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\r\\n    error InvalidPositionMarket(address market);\\r\\n    error InvalidCollateralTokenForMarket(address market, address token);\\r\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\r\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\r\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\r\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\r\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\r\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\r\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\r\\n    error UnexpectedPoolValue(int256 poolValue);\\r\\n\\r\\n    // Oracle errors\\r\\n    error EmptySigner(uint256 signerIndex);\\r\\n    error InvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\r\\n    error InvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\r\\n    error HasRealtimeFeedId(address token, bytes32 feedId);\\r\\n    error InvalidRealtimeFeedLengths(uint256 tokensLength, uint256 dataLength);\\r\\n    error EmptyRealtimeFeedId(address token);\\r\\n    error InvalidRealtimeFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\r\\n    error InvalidRealtimeBidAsk(address token, int192 bid, int192 ask);\\r\\n    error InvalidRealtimeBlockHash(address token, bytes32 blockHash, bytes32 expectedBlockHash);\\r\\n    error InvalidRealtimePrices(address token, int192 bid, int192 ask);\\r\\n    error RealtimeMaxPriceAgeExceeded(address token, uint256 oracleTimestamp, uint256 currentTimestamp);\\r\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\r\\n    error MinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\r\\n    error MaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\r\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\r\\n    error MinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\r\\n    error MaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\r\\n    error EmptyPriceFeedMultiplier(address token);\\r\\n    error EmptyRealtimeFeedMultiplier(address token);\\r\\n    error InvalidFeedPrice(address token, int256 price);\\r\\n    error PriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\r\\n    error MaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\r\\n    error InvalidOraclePrice(address token);\\r\\n    error InvalidSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\r\\n    error InvalidMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\r\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\r\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\r\\n    error EmptyPriceFeed(address token);\\r\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\r\\n    error MaxRefPriceDeviationExceeded(\\r\\n        address token,\\r\\n        uint256 price,\\r\\n        uint256 refPrice,\\r\\n        uint256 maxRefPriceDeviationFactor\\r\\n    );\\r\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\r\\n\\r\\n    // OracleModule errors\\r\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\r\\n    error EndOfOracleSimulation();\\r\\n\\r\\n    // OracleUtils errors\\r\\n    error EmptyCompactedPrice(uint256 index);\\r\\n    error EmptyCompactedBlockNumber(uint256 index);\\r\\n    error EmptyCompactedTimestamp(uint256 index);\\r\\n    error UnsupportedOracleBlockNumberType(uint256 oracleBlockNumberType);\\r\\n    error InvalidSignature(address recoveredSigner, address expectedSigner);\\r\\n\\r\\n    error EmptyPrimaryPrice(address token);\\r\\n\\r\\n    error OracleBlockNumbersAreSmallerThanRequired(uint256[] oracleBlockNumbers, uint256 expectedBlockNumber);\\r\\n    error OracleBlockNumberNotWithinRange(\\r\\n        uint256[] minOracleBlockNumbers,\\r\\n        uint256[] maxOracleBlockNumbers,\\r\\n        uint256 blockNumber\\r\\n    );\\r\\n\\r\\n    // BaseOrderUtils errors\\r\\n    error EmptyOrder();\\r\\n    error UnsupportedOrderType();\\r\\n    error InvalidOrderPrices(\\r\\n        uint256 primaryPriceMin,\\r\\n        uint256 primaryPriceMax,\\r\\n        uint256 triggerPrice,\\r\\n        uint256 orderType\\r\\n    );\\r\\n    error EmptySizeDeltaInTokens();\\r\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\r\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\r\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\r\\n\\r\\n    // IncreaseOrderUtils errors\\r\\n    error UnexpectedPositionState();\\r\\n\\r\\n    // OrderUtils errors\\r\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\r\\n    error OrderAlreadyFrozen();\\r\\n\\r\\n    // OrderStoreUtils errors\\r\\n    error OrderNotFound(bytes32 key);\\r\\n\\r\\n    // SwapOrderUtils errors\\r\\n    error UnexpectedMarket();\\r\\n\\r\\n    // DecreasePositionCollateralUtils errors\\r\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\r\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\r\\n\\r\\n    // DecreasePositionUtils errors\\r\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\r\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\r\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\r\\n    error PositionShouldNotBeLiquidated(\\r\\n        string reason,\\r\\n        int256 remainingCollateralUsd,\\r\\n        int256 minCollateralUsd,\\r\\n        int256 minCollateralUsdForLeverage\\r\\n    );\\r\\n\\r\\n    // IncreasePositionUtils errors\\r\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\r\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\r\\n\\r\\n    // PositionStoreUtils errors\\r\\n    error PositionNotFound(bytes32 key);\\r\\n\\r\\n    // PositionUtils errors\\r\\n    error LiquidatablePosition(\\r\\n        string reason,\\r\\n        int256 remainingCollateralUsd,\\r\\n        int256 minCollateralUsd,\\r\\n        int256 minCollateralUsdForLeverage\\r\\n    );\\r\\n\\r\\n    error EmptyPosition();\\r\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\r\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\r\\n\\r\\n    // PositionPricingUtils errors\\r\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\r\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\r\\n\\r\\n    // SwapPricingUtils errors\\r\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\r\\n\\r\\n    // RoleModule errors\\r\\n    error Unauthorized(address msgSender, string role);\\r\\n\\r\\n    // RoleStore errors\\r\\n    error ThereMustBeAtLeastOneRoleAdmin();\\r\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\r\\n\\r\\n    // ExchangeRouter errors\\r\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\r\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\r\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\r\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\r\\n\\r\\n    // SwapUtils errors\\r\\n    error InvalidTokenIn(address tokenIn, address market);\\r\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\r\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\r\\n    error DuplicatedMarketInSwapPath(address market);\\r\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\r\\n\\r\\n    // SubaccountRouter errors\\r\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\r\\n\\r\\n    // SubaccountUtils errors\\r\\n    error SubaccountNotAuthorized(address account, address subaccount);\\r\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\r\\n\\r\\n    // TokenUtils errors\\r\\n    error EmptyTokenTranferGasLimit(address token);\\r\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\r\\n    error EmptyHoldingAddress();\\r\\n\\r\\n    // AccountUtils errors\\r\\n    error EmptyAccount();\\r\\n    error EmptyReceiver();\\r\\n\\r\\n    // Array errors\\r\\n    error CompactedArrayOutOfBounds(\\r\\n        uint256[] compactedValues,\\r\\n        uint256 index,\\r\\n        uint256 slotIndex,\\r\\n        string label\\r\\n    );\\r\\n\\r\\n    error ArrayOutOfBoundsUint256(\\r\\n        uint256[] values,\\r\\n        uint256 index,\\r\\n        string label\\r\\n    );\\r\\n\\r\\n    error ArrayOutOfBoundsBytes(\\r\\n        bytes[] values,\\r\\n        uint256 index,\\r\\n        string label\\r\\n    );\\r\\n\\r\\n    // WithdrawalStoreUtils errors\\r\\n    error WithdrawalNotFound(bytes32 key);\\r\\n\\r\\n    // WithdrawalUtils errors\\r\\n    error EmptyWithdrawal();\\r\\n    error EmptyWithdrawalAmount();\\r\\n    error MinLongTokens(uint256 received, uint256 expected);\\r\\n    error MinShortTokens(uint256 received, uint256 expected);\\r\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\r\\n    error InsufficientWntAmount(uint256 wntAmount, uint256 executionFee);\\r\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\r\\n\\r\\n    // Uint256Mask errors\\r\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\r\\n    error DuplicatedIndex(uint256 index, string label);\\r\\n}\\r\\n\",\"keccak256\":\"0xd5d50a1848c8fcce3913b98c52ada1cd82c36454e3a92935daee61e1c2a11795\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../role/RoleModule.sol\\\";\\r\\nimport \\\"./EventUtils.sol\\\";\\r\\n\\r\\n// @title EventEmitter\\r\\n// @dev Contract to emit events\\r\\n// This allows main events to be emitted from a single contract\\r\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\r\\n// Peripheral services like monitoring or analytics would be able to continue\\r\\n// to work without an update and without segregating historical data\\r\\ncontract EventEmitter is RoleModule {\\r\\n    event EventLog(\\r\\n        address msgSender,\\r\\n        string eventName,\\r\\n        string indexed eventNameHash,\\r\\n        EventUtils.EventLogData eventData\\r\\n    );\\r\\n\\r\\n    event EventLog1(\\r\\n        address msgSender,\\r\\n        string eventName,\\r\\n        string indexed eventNameHash,\\r\\n        bytes32 indexed topic1,\\r\\n        EventUtils.EventLogData eventData\\r\\n    );\\r\\n\\r\\n    event EventLog2(\\r\\n        address msgSender,\\r\\n        string eventName,\\r\\n        string indexed eventNameHash,\\r\\n        bytes32 indexed topic1,\\r\\n        bytes32 indexed topic2,\\r\\n        EventUtils.EventLogData eventData\\r\\n    );\\r\\n\\r\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\r\\n\\r\\n    // @dev emit a general event log\\r\\n    // @param eventName the name of the event\\r\\n    // @param eventData the event data\\r\\n    function emitEventLog(\\r\\n        string memory eventName,\\r\\n        EventUtils.EventLogData memory eventData\\r\\n    ) external onlyController {\\r\\n        emit EventLog(\\r\\n            msg.sender,\\r\\n            eventName,\\r\\n            eventName,\\r\\n            eventData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // @dev emit a general event log\\r\\n    // @param eventName the name of the event\\r\\n    // @param topic1 topic1 for indexing\\r\\n    // @param eventData the event data\\r\\n    function emitEventLog1(\\r\\n        string memory eventName,\\r\\n        bytes32 topic1,\\r\\n        EventUtils.EventLogData memory eventData\\r\\n    ) external onlyController {\\r\\n        emit EventLog1(\\r\\n            msg.sender,\\r\\n            eventName,\\r\\n            eventName,\\r\\n            topic1,\\r\\n            eventData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // @dev emit a general event log\\r\\n    // @param eventName the name of the event\\r\\n    // @param topic1 topic1 for indexing\\r\\n    // @param topic2 topic2 for indexing\\r\\n    // @param eventData the event data\\r\\n    function emitEventLog2(\\r\\n        string memory eventName,\\r\\n        bytes32 topic1,\\r\\n        bytes32 topic2,\\r\\n        EventUtils.EventLogData memory eventData\\r\\n    ) external onlyController {\\r\\n        emit EventLog2(\\r\\n            msg.sender,\\r\\n            eventName,\\r\\n            eventName,\\r\\n            topic1,\\r\\n            topic2,\\r\\n            eventData\\r\\n        );\\r\\n    }\\r\\n    // @dev event log for general use\\r\\n    // @param topic1 event topic 1\\r\\n    // @param data additional data\\r\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\r\\n        uint256 len = data.length;\\r\\n        assembly {\\r\\n            log1(add(data, 32), len, topic1)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // @dev event log for general use\\r\\n    // @param topic1 event topic 1\\r\\n    // @param topic2 event topic 2\\r\\n    // @param data additional data\\r\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\r\\n        uint256 len = data.length;\\r\\n        assembly {\\r\\n            log2(add(data, 32), len, topic1, topic2)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // @dev event log for general use\\r\\n    // @param topic1 event topic 1\\r\\n    // @param topic2 event topic 2\\r\\n    // @param topic3 event topic 3\\r\\n    // @param data additional data\\r\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\r\\n        uint256 len = data.length;\\r\\n        assembly {\\r\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // @dev event log for general use\\r\\n    // @param topic1 event topic 1\\r\\n    // @param topic2 event topic 2\\r\\n    // @param topic3 event topic 3\\r\\n    // @param topic4 event topic 4\\r\\n    // @param data additional data\\r\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\r\\n        uint256 len = data.length;\\r\\n        assembly {\\r\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6eb7fdf6974d8546f1ffeae8bd47abe27354fef405929588f91ba0da1287213a\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary EventUtils {\\r\\n    struct EmitPositionDecreaseParams {\\r\\n        bytes32 key;\\r\\n        address account;\\r\\n        address market;\\r\\n        address collateralToken;\\r\\n        bool isLong;\\r\\n    }\\r\\n\\r\\n    struct EventLogData {\\r\\n        AddressItems addressItems;\\r\\n        UintItems uintItems;\\r\\n        IntItems intItems;\\r\\n        BoolItems boolItems;\\r\\n        Bytes32Items bytes32Items;\\r\\n        BytesItems bytesItems;\\r\\n        StringItems stringItems;\\r\\n    }\\r\\n\\r\\n    struct AddressItems {\\r\\n        AddressKeyValue[] items;\\r\\n        AddressArrayKeyValue[] arrayItems;\\r\\n    }\\r\\n\\r\\n    struct UintItems {\\r\\n        UintKeyValue[] items;\\r\\n        UintArrayKeyValue[] arrayItems;\\r\\n    }\\r\\n\\r\\n    struct IntItems {\\r\\n        IntKeyValue[] items;\\r\\n        IntArrayKeyValue[] arrayItems;\\r\\n    }\\r\\n\\r\\n    struct BoolItems {\\r\\n        BoolKeyValue[] items;\\r\\n        BoolArrayKeyValue[] arrayItems;\\r\\n    }\\r\\n\\r\\n    struct Bytes32Items {\\r\\n        Bytes32KeyValue[] items;\\r\\n        Bytes32ArrayKeyValue[] arrayItems;\\r\\n    }\\r\\n\\r\\n    struct BytesItems {\\r\\n        BytesKeyValue[] items;\\r\\n        BytesArrayKeyValue[] arrayItems;\\r\\n    }\\r\\n\\r\\n    struct StringItems {\\r\\n        StringKeyValue[] items;\\r\\n        StringArrayKeyValue[] arrayItems;\\r\\n    }\\r\\n\\r\\n    struct AddressKeyValue {\\r\\n        string key;\\r\\n        address value;\\r\\n    }\\r\\n\\r\\n    struct AddressArrayKeyValue {\\r\\n        string key;\\r\\n        address[] value;\\r\\n    }\\r\\n\\r\\n    struct UintKeyValue {\\r\\n        string key;\\r\\n        uint256 value;\\r\\n    }\\r\\n\\r\\n    struct UintArrayKeyValue {\\r\\n        string key;\\r\\n        uint256[] value;\\r\\n    }\\r\\n\\r\\n    struct IntKeyValue {\\r\\n        string key;\\r\\n        int256 value;\\r\\n    }\\r\\n\\r\\n    struct IntArrayKeyValue {\\r\\n        string key;\\r\\n        int256[] value;\\r\\n    }\\r\\n\\r\\n    struct BoolKeyValue {\\r\\n        string key;\\r\\n        bool value;\\r\\n    }\\r\\n\\r\\n    struct BoolArrayKeyValue {\\r\\n        string key;\\r\\n        bool[] value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32KeyValue {\\r\\n        string key;\\r\\n        bytes32 value;\\r\\n    }\\r\\n\\r\\n    struct Bytes32ArrayKeyValue {\\r\\n        string key;\\r\\n        bytes32[] value;\\r\\n    }\\r\\n\\r\\n    struct BytesKeyValue {\\r\\n        string key;\\r\\n        bytes value;\\r\\n    }\\r\\n\\r\\n    struct BytesArrayKeyValue {\\r\\n        string key;\\r\\n        bytes[] value;\\r\\n    }\\r\\n\\r\\n    struct StringKeyValue {\\r\\n        string key;\\r\\n        string value;\\r\\n    }\\r\\n\\r\\n    struct StringArrayKeyValue {\\r\\n        string key;\\r\\n        string[] value;\\r\\n    }\\r\\n\\r\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\r\\n        items.items = new EventUtils.AddressKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\r\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\r\\n        items.items[index].key = key;\\r\\n        items.items[index].value = value;\\r\\n    }\\r\\n\\r\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\r\\n        items.arrayItems[index].key = key;\\r\\n        items.arrayItems[index].value = value;\\r\\n    }\\r\\n\\r\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\r\\n        items.items = new EventUtils.UintKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\r\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\r\\n        items.items[index].key = key;\\r\\n        items.items[index].value = value;\\r\\n    }\\r\\n\\r\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\r\\n        items.arrayItems[index].key = key;\\r\\n        items.arrayItems[index].value = value;\\r\\n    }\\r\\n\\r\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\r\\n        items.items = new EventUtils.IntKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\r\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\r\\n        items.items[index].key = key;\\r\\n        items.items[index].value = value;\\r\\n    }\\r\\n\\r\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\r\\n        items.arrayItems[index].key = key;\\r\\n        items.arrayItems[index].value = value;\\r\\n    }\\r\\n\\r\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\r\\n        items.items = new EventUtils.BoolKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\r\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\r\\n        items.items[index].key = key;\\r\\n        items.items[index].value = value;\\r\\n    }\\r\\n\\r\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\r\\n        items.arrayItems[index].key = key;\\r\\n        items.arrayItems[index].value = value;\\r\\n    }\\r\\n\\r\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\r\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\r\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\r\\n        items.items[index].key = key;\\r\\n        items.items[index].value = value;\\r\\n    }\\r\\n\\r\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\r\\n        items.arrayItems[index].key = key;\\r\\n        items.arrayItems[index].value = value;\\r\\n    }\\r\\n\\r\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\r\\n        items.items = new EventUtils.BytesKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\r\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\r\\n        items.items[index].key = key;\\r\\n        items.items[index].value = value;\\r\\n    }\\r\\n\\r\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\r\\n        items.arrayItems[index].key = key;\\r\\n        items.arrayItems[index].value = value;\\r\\n    }\\r\\n\\r\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\r\\n        items.items = new EventUtils.StringKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\r\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\r\\n    }\\r\\n\\r\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\r\\n        items.items[index].key = key;\\r\\n        items.items[index].value = value;\\r\\n    }\\r\\n\\r\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\r\\n        items.arrayItems[index].key = key;\\r\\n        items.arrayItems[index].value = value;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8047353757d99039e2f7231d3acf661fea0200a02d40666dc343f2e29d3f6e5b\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../role/RoleModule.sol\\\";\\r\\nimport \\\"../event/EventEmitter.sol\\\";\\r\\nimport \\\"../event/EventUtils.sol\\\";\\r\\nimport \\\"../utils/Cast.sol\\\";\\r\\n\\r\\n// @title OracleStore\\r\\n// @dev Stores the list of oracle signers\\r\\ncontract OracleStore is RoleModule {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableValues for EnumerableSet.AddressSet;\\r\\n\\r\\n    using EventUtils for EventUtils.AddressItems;\\r\\n    using EventUtils for EventUtils.UintItems;\\r\\n    using EventUtils for EventUtils.IntItems;\\r\\n    using EventUtils for EventUtils.BoolItems;\\r\\n    using EventUtils for EventUtils.Bytes32Items;\\r\\n    using EventUtils for EventUtils.BytesItems;\\r\\n    using EventUtils for EventUtils.StringItems;\\r\\n\\r\\n    EventEmitter public immutable eventEmitter;\\r\\n\\r\\n    EnumerableSet.AddressSet internal signers;\\r\\n\\r\\n    constructor(RoleStore _roleStore, EventEmitter _eventEmitter) RoleModule(_roleStore) {\\r\\n        eventEmitter = _eventEmitter;\\r\\n    }\\r\\n\\r\\n    // @dev adds a signer\\r\\n    // @param account address of the signer to add\\r\\n    function addSigner(address account) external onlyController {\\r\\n        signers.add(account);\\r\\n\\r\\n        EventUtils.EventLogData memory eventData;\\r\\n        eventData.addressItems.initItems(1);\\r\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\r\\n\\r\\n        eventEmitter.emitEventLog1(\\r\\n            \\\"SignerAdded\\\",\\r\\n            Cast.toBytes32(account),\\r\\n            eventData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // @dev removes a signer\\r\\n    // @param account address of the signer to remove\\r\\n    function removeSigner(address account) external onlyController {\\r\\n        signers.remove(account);\\r\\n\\r\\n        EventUtils.EventLogData memory eventData;\\r\\n        eventData.addressItems.initItems(1);\\r\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\r\\n\\r\\n        eventEmitter.emitEventLog1(\\r\\n            \\\"SignerRemoved\\\",\\r\\n            Cast.toBytes32(account),\\r\\n            eventData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // @dev get the total number of signers\\r\\n    // @return the total number of signers\\r\\n    function getSignerCount() external view returns (uint256) {\\r\\n        return signers.length();\\r\\n    }\\r\\n\\r\\n    // @dev get the signer at the specified index\\r\\n    // @param index the index of the signer to get\\r\\n    // @return the signer at the specified index\\r\\n    function getSigner(uint256 index) external view returns (address) {\\r\\n        return signers.at(index);\\r\\n    }\\r\\n\\r\\n    // @dev get the signers for the specified indexes\\r\\n    // @param start the start index, the value for this index will be included\\r\\n    // @param end the end index, the value for this index will not be included\\r\\n    // @return the signers for the specified indexes\\r\\n    function getSigners(uint256 start, uint256 end) external view returns (address[] memory) {\\r\\n        return signers.valuesAt(start, end);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x78cd6db2f74ac879b366487efdbbaec1ef7279367c5b567cbb3afedc4a0f2299\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Role\\r\\n * @dev Library for role keys\\r\\n */\\r\\nlibrary Role {\\r\\n    /**\\r\\n     * @dev The ROLE_ADMIN role.\\r\\n     */\\r\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The TIMELOCK_ADMIN role.\\r\\n     */\\r\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The TIMELOCK_MULTISIG role.\\r\\n     */\\r\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The CONFIG_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The CONTROLLER role.\\r\\n     */\\r\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\r\\n     */\\r\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The ROUTER_PLUGIN role.\\r\\n     */\\r\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The MARKET_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The FEE_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The ORDER_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The FROZEN_ORDER_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\r\\n\\r\\n    /**\\r\\n     * @dev The PRICING_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\r\\n    /**\\r\\n     * @dev The LIQUIDATION_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\r\\n    /**\\r\\n     * @dev The ADL_KEEPER role.\\r\\n     */\\r\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\r\\n}\\r\\n\",\"keccak256\":\"0xfc69b10b86f036b45f8ec44f4f3e2120fefa272acd16bd676425a302dc13fd69\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./RoleStore.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RoleModule\\r\\n * @dev Contract for role validation functions\\r\\n */\\r\\ncontract RoleModule {\\r\\n    RoleStore public immutable roleStore;\\r\\n\\r\\n    /**\\r\\n     * @dev Constructor that initializes the role store for this contract.\\r\\n     *\\r\\n     * @param _roleStore The contract instance to use as the role store.\\r\\n     */\\r\\n    constructor(RoleStore _roleStore) {\\r\\n        roleStore = _roleStore;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows the contract's own address to call the function.\\r\\n     */\\r\\n    modifier onlySelf() {\\r\\n        if (msg.sender != address(this)) {\\r\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\r\\n     */\\r\\n    modifier onlyTimelockMultisig() {\\r\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\r\\n     */\\r\\n    modifier onlyTimelockAdmin() {\\r\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyConfigKeeper() {\\r\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\r\\n     */\\r\\n    modifier onlyController() {\\r\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\r\\n     */\\r\\n    modifier onlyGovTokenController() {\\r\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\r\\n     */\\r\\n    modifier onlyRouterPlugin() {\\r\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyMarketKeeper() {\\r\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyFeeKeeper() {\\r\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyFeeDistributionKeeper() {\\r\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyOrderKeeper() {\\r\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyPricingKeeper() {\\r\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyLiquidationKeeper() {\\r\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\r\\n     */\\r\\n    modifier onlyAdlKeeper() {\\r\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Validates that the caller has the specified role.\\r\\n     *\\r\\n     * If the caller does not have the specified role, the transaction is reverted.\\r\\n     *\\r\\n     * @param role The key of the role to validate.\\r\\n     * @param roleName The name of the role to validate.\\r\\n     */\\r\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\r\\n        if (!roleStore.hasRole(msg.sender, role)) {\\r\\n            revert Errors.Unauthorized(msg.sender, roleName);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4a1c0c26b4bad1e549d5b0a84cdc8a36f40a844f1bdee6e789e6db1eda1435cb\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"../utils/EnumerableValues.sol\\\";\\r\\nimport \\\"./Role.sol\\\";\\r\\nimport \\\"../error/Errors.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title RoleStore\\r\\n * @dev Stores roles and their members.\\r\\n */\\r\\ncontract RoleStore {\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n    using EnumerableValues for EnumerableSet.AddressSet;\\r\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    EnumerableSet.Bytes32Set internal roles;\\r\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\r\\n    // checking if an account has a role is a frequently used function\\r\\n    // roleCache helps to save gas by offering a more efficient lookup\\r\\n    // vs calling roleMembers[key].contains(account)\\r\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\r\\n\\r\\n    modifier onlyRoleAdmin() {\\r\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\r\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants the specified role to the given account.\\r\\n     *\\r\\n     * @param account The address of the account.\\r\\n     * @param roleKey The key of the role to grant.\\r\\n     */\\r\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\r\\n        _grantRole(account, roleKey);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes the specified role from the given account.\\r\\n     *\\r\\n     * @param account The address of the account.\\r\\n     * @param roleKey The key of the role to revoke.\\r\\n     */\\r\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\r\\n        _revokeRole(account, roleKey);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the given account has the specified role.\\r\\n     *\\r\\n     * @param account The address of the account.\\r\\n     * @param roleKey The key of the role.\\r\\n     * @return True if the account has the role, false otherwise.\\r\\n     */\\r\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\r\\n        return roleCache[account][roleKey];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of roles stored in the contract.\\r\\n     *\\r\\n     * @return The number of roles.\\r\\n     */\\r\\n    function getRoleCount() external view returns (uint256) {\\r\\n        return roles.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the keys of the roles stored in the contract.\\r\\n     *\\r\\n     * @param start The starting index of the range of roles to return.\\r\\n     * @param end The ending index of the range of roles to return.\\r\\n     * @return The keys of the roles.\\r\\n     */\\r\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\r\\n        return roles.valuesAt(start, end);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of members of the specified role.\\r\\n     *\\r\\n     * @param roleKey The key of the role.\\r\\n     * @return The number of members of the role.\\r\\n     */\\r\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\r\\n        return roleMembers[roleKey].length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the members of the specified role.\\r\\n     *\\r\\n     * @param roleKey The key of the role.\\r\\n     * @param start the start index, the value for this index will be included.\\r\\n     * @param end the end index, the value for this index will not be included.\\r\\n     * @return The members of the role.\\r\\n     */\\r\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\r\\n        return roleMembers[roleKey].valuesAt(start, end);\\r\\n    }\\r\\n\\r\\n    function _grantRole(address account, bytes32 roleKey) internal {\\r\\n        roles.add(roleKey);\\r\\n        roleMembers[roleKey].add(account);\\r\\n        roleCache[account][roleKey] = true;\\r\\n    }\\r\\n\\r\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\r\\n        roleMembers[roleKey].remove(account);\\r\\n        roleCache[account][roleKey] = false;\\r\\n\\r\\n        if (roleMembers[roleKey].length() == 0) {\\r\\n            if (roleKey == Role.ROLE_ADMIN) {\\r\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\r\\n            }\\r\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\r\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3ddfdd95ba105725d7f70d8e6ec74858f61aac4a9083ce1ae74a63aa13b96c2c\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Cast\\r\\n * @dev Library for casting functions\\r\\n */\\r\\nlibrary Cast {\\r\\n    function toBytes32(address value) internal pure returns (bytes32) {\\r\\n        return bytes32(uint256(uint160(value)));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x357a3eb8e40d437a60793eb49c8ed0457e9492267b04896804dd6ab732547ea6\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EnumerableValues\\r\\n * @dev Library to extend the EnumerableSet library with functions to get\\r\\n * valuesAt for a range\\r\\n */\\r\\nlibrary EnumerableValues {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n    using EnumerableSet for EnumerableSet.AddressSet;\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    /**\\r\\n     * Returns an array of bytes32 values from the given set, starting at the given\\r\\n     * start index and ending before the given end index.\\r\\n     *\\r\\n     * @param set The set to get the values from.\\r\\n     * @param start The starting index.\\r\\n     * @param end The ending index.\\r\\n     * @return An array of bytes32 values.\\r\\n     */\\r\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\r\\n        uint256 max = set.length();\\r\\n        if (end > max) { end = max; }\\r\\n\\r\\n        bytes32[] memory items = new bytes32[](end - start);\\r\\n        for (uint256 i = start; i < end; i++) {\\r\\n            items[i - start] = set.at(i);\\r\\n        }\\r\\n\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns an array of address values from the given set, starting at the given\\r\\n     * start index and ending before the given end index.\\r\\n     *\\r\\n     * @param set The set to get the values from.\\r\\n     * @param start The starting index.\\r\\n     * @param end The ending index.\\r\\n     * @return An array of address values.\\r\\n     */\\r\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\r\\n        uint256 max = set.length();\\r\\n        if (end > max) { end = max; }\\r\\n\\r\\n        address[] memory items = new address[](end - start);\\r\\n        for (uint256 i = start; i < end; i++) {\\r\\n            items[i - start] = set.at(i);\\r\\n        }\\r\\n\\r\\n        return items;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns an array of uint256 values from the given set, starting at the given\\r\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\r\\n     *\\r\\n     * @param set The set to get the values from.\\r\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\r\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\r\\n     * @return An array of uint256 values.\\r\\n     */\\r\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\r\\n        if (start >= set.length()) {\\r\\n            return new uint256[](0);\\r\\n        }\\r\\n\\r\\n        uint256 max = set.length();\\r\\n        if (end > max) { end = max; }\\r\\n\\r\\n        uint256[] memory items = new uint256[](end - start);\\r\\n        for (uint256 i = start; i < end; i++) {\\r\\n            items[i - start] = set.at(i);\\r\\n        }\\r\\n\\r\\n        return items;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb985a1614407b53bff1842f6d5d7b39525c97e66f580b96936d98396ce16333e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 51289,
        "contract": "contracts/oracle/OracleStore.sol:OracleStore",
        "label": "signers",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)14066_storage"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)14066_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 14065,
            "contract": "contracts/oracle/OracleStore.sol:OracleStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)13751_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)13751_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 13746,
            "contract": "contracts/oracle/OracleStore.sol:OracleStore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 13750,
            "contract": "contracts/oracle/OracleStore.sol:OracleStore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}